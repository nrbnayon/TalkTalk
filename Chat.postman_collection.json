{
	"info": {
		"_postman_id": "3cef733f-9769-4b96-8825-986712876c38",
		"name": "Chat",
		"description": "# Chat System API Documentation\n\n## Base URL\n\n```\nhttp://localhost:5000/api/v1\n\n ```\n\n## Authentication\n\nAll endpoints require authentication using JWT token in the Authorization header:\n\n```\nAuthorization: Bearer <your_jwt_token>\n\n ```\n\n## API Endpoints\n\n### Chat Module\n\n#### 1\\. Access Chat\n\nCreate or access a one-on-one chat with another user.\n\n``` http\nPOST /chat\nContent-Type: application/json\n{\n    \"userId\": \"target_user_id\"\n}\n\n ```\n\n#### 2\\. Get All Chats\n\nRetrieve all chats for the current user.\n\n``` http\nGET /chat\n\n ```\n\n#### 3\\. Create Group Chat\n\nCreate a new group chat.\n\n``` http\nPOST /chat/group\nContent-Type: application/json\n{\n    \"name\": \"Group Name\",\n    \"users\": [\"user_id_1\", \"user_id_2\"]\n}\n\n ```\n\n#### 4\\. Rename Group\n\nRename an existing group chat.\n\n``` http\nPATCH /chat/rename\nContent-Type: application/json\n{\n    \"chatId\": \"chat_id\",\n    \"chatName\": \"New Group Name\"\n}\n\n ```\n\n#### 5\\. Remove User from Group\n\nRemove a user from a group chat.\n\n``` http\nPATCH /chat/groupremove\nContent-Type: application/json\n{\n    \"chatId\": \"chat_id\",\n    \"userId\": \"user_id_to_remove\"\n}\n\n ```\n\n#### 6\\. Add User to Group\n\nAdd a user to a group chat.\n\n``` http\nPATCH /chat/groupadd\nContent-Type: application/json\n{\n    \"chatId\": \"chat_id\",\n    \"userId\": \"user_id_to_add\"\n}\n\n ```\n\n### Message Module\n\n#### 1\\. Send Message\n\nSend a new message in a chat.\n\n``` http\nPOST /message\nContent-Type: application/json\n{\n    \"content\": \"Message content\",\n    \"chatId\": \"chat_id\",\n    \"replyToId\": \"message_id_to_reply\" // Optional\n}\n\n ```\n\n#### 2\\. Get Chat Messages\n\nRetrieve all messages for a specific chat.\n\n``` http\nGET /message/:chatId\n\n ```\n\n#### 3\\. Edit Message\n\nEdit an existing message.\n\n``` http\nPATCH /message/:messageId/edit\nContent-Type: application/json\n{\n    \"content\": \"Updated message content\"\n}\n\n ```\n\n#### 4\\. Delete Message\n\nDelete a message.\n\n``` http\nDELETE /message/:messageId\n\n ```\n\n#### 5\\. Mark Message as Read\n\nMark a message as read.\n\n``` http\nPATCH /message/:messageId/read\n\n ```\n\n#### 6\\. Toggle Pin Message\n\nToggle pin status of a message.\n\n``` http\nPATCH /message/:messageId/pin\n\n ```\n\n#### 7\\. Search Messages\n\nSearch messages with filters.\n\n``` http\nGET /message/search?searchTerm=keyword&chatId=chat_id&isPinned=true&startDate=2024-02-01&endDate=2024-02-12\n\n ```\n\n#### 8\\. Get Unseen Message Count\n\nGet count of unseen messages in a chat.\n\n``` http\nGET /message/:chatId/unseen\n\n ```\n\n## Socket Events Testing\n\n### Setup in Postman\n\n1. Create a new WebSocket request\n    \n2. Connect to: `ws://localhost:5000`\n    \n3. Authorization: Bearer\n    \n\n### Socket Events to Test\n\n#### User Connection Events\n\n``` javascript\n// Emit when user comes online\nsocket.emit('user-online', userId);\n// Listen for online users update\nsocket.on('online-users-update', (onlineUsers) => {\n    console.log('Online users:', onlineUsers);\n});\n\n ```\n\n#### Chat Room Events\n\n``` javascript\n// Join a chat room\nsocket.emit('join-chat', chatId);\n// Leave a chat room\nsocket.emit('leave-chat', chatId);\n\n ```\n\n#### Typing Indicators\n\n``` javascript\n// Start typing\nsocket.emit('typing-start', {\n    chatId: 'chat_id',\n    userId: 'user_id'\n});\n// Stop typing\nsocket.emit('typing-stop', {\n    chatId: 'chat_id',\n    userId: 'user_id'\n});\n// Listen for typing updates\nsocket.on('typing-update', (data) => {\n    console.log('Typing status:', data);\n});\n\n ```\n\n#### Message Events\n\n``` javascript\n// Send new message\nsocket.emit('new-message', messageObject);\n// Listen for new messages\nsocket.on('message-received', (message) => {\n    console.log('New message:', message);\n});\n// Mark message as read\nsocket.emit('message-read', {\n    messageId: 'message_id',\n    chatId: 'chat_id',\n    userId: 'user_id'\n});\n\n ```\n\n#### Call Events\n\n``` javascript\n// Initiate call\nsocket.emit('call-initiate', {\n    chatId: 'chat_id',\n    callType: 'video', // or 'audio'\n    participants: ['user_id_1', 'user_id_2']\n});\n// Accept call\nsocket.emit('call-accept', callId);\n// Reject call\nsocket.emit('call-reject', callId);\n// End call\nsocket.emit('call-end', callId);\n// Listen for call events\nsocket.on('call-incoming', (callSession) => {\n    console.log('Incoming call:', callSession);\n});\nsocket.on('call-status-update', (data) => {\n    console.log('Call status:', data);\n});\nsocket.on('call-ended', (data) => {\n    console.log('Call ended:', data);\n});\n\n ```\n\n## Code Review Notes\n\n1. const processUploadedFile = async (file: Express.Multer.File) => { // Add file processing logic here return { url: \\`/uploads/${file.filename}\\`, metadata: { size: file.size, mimeType: file.mimetype } };};\n    \n2. interface ICallSession { participants: Types.ObjectId\\[\\]; // Change from string\\[\\] to Types.ObjectId\\[\\] // ... rest of the interface}\n    \n3. Message Service File Upload:\n    \n\n- Add proper type handling for file uploads\n    \n- Implement file validation\n    \n- Add error handling for file processing\n    \n\n1. Connection Issues:\n    \n\n- Ensure MongoDB connection is properly configured\n    \n- Add error handling for database operations\n    \n- Implement connection pooling for better performance\n    \n\n1. Security Considerations:\n    \n\n- Implement rate limiting\n    \n- Add input validation\n    \n- Implement proper error handling\n    \n- Add request logging\n    \n\n**API & Socket Testing Documentation using Postman1. Setting Up Postman for API Testing**Before testing, make sure your server is running:bashCopyEditnpm run devorbashCopyEditnode index.js**2\\. API TestingUser Authentication APIs**MethodEndpointDescriptionRequired Fields`POST/auth/register`Register a new user`name, email, passwordPOST/auth/login`User login`email, password`**Chat APIs**MethodEndpointDescriptionRequired Fields`POST/chat`Start a new chat`userIdGET/chat`Get all chats for logged-in user-`POST/chat/group`Create a group chat`name, users[]PATCH/chat/rename`Rename a group chat`chatId, chatNamePATCH/chat/groupremove`Remove user from group`chatId, userIdPATCH/chat/groupadd`Add user to group`chatId, userId`**Message APIs**MethodEndpointDescriptionRequired Fields`POST/messages`Send a new message`content, chatIdGET/messages/:chatId`Get all messages of a chat-`PATCH/messages/:messageId/edit`Edit a message`contentDELETE/messages/:messageId`Delete a message-`PATCH/messages/:messageId/read`Mark message as read-`PATCH/messages/:messageId/pin`Pin/unpin a message-`GET/messages/search?searchTerm=word`Search messages`searchTerm`**3\\. WebSocket Testing**You can test WebSocket connections using **Postman** or **Socket.IO Client**.**Connecting a User**jsonCopyEdit{ \"event\": \"user-online\", \"data\": \"userId\"}**Sending a Message**jsonCopyEdit{ \"event\": \"new-message\", \"data\": { \"content\": \"Hello!\", \"chatId\": \"62dfsd23\" }}**Typing Indicator**jsonCopyEdit{ \"event\": \"typing-start\", \"data\": { \"chatId\": \"62dfsd23\", \"userId\": \"629sdj22\" }}**Call Events**jsonCopyEdit{ \"event\": \"call-initiate\", \"data\": { \"chatId\": \"6298sd88\", \"callType\": \"video\", \"participants\": \\[\"user1Id\", \"user2Id\"\\] }}**Final Steps**Now, everything should be working properly! ðŸš€EndFragment  \n  \n\n- **WebSocket URL:** `ws://localhost:5000`\n    \n- **Events & Payloads**\n    \n- **Base URL:** `http://localhost:5000/api/v1`",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26684367",
		"_collection_link": "https://alpha1-1602.postman.co/workspace/Bar-Bar-REST-API-WS~2e5ac130-951f-421e-bede-a612935fc071/collection/26684367-3cef733f-9769-4b96-8825-986712876c38?action=share&source=collection_link&creator=26684367"
	},
	"item": [
		{
			"name": "New Folder",
			"item": [],
			"description": "StartFragment\n\nIt looks like you have two main issues in your TypeScript project:\n\n1. **Undefined function error (****`processUploadedFile`****) in** **`messages.service.ts`**\n    \n2. **Type mismatch (****`string[]`** **vs.** **`ObjectId[]`****) in** **`ICallSession.participants`**\n    \n\n---\n\n### **Fix 1: Undefined Function (****`processUploadedFile`****)**\n\nError:\n\n> &lt;p &gt;Cannot find name &amp;#x27;processUploadedFile&amp;#x27;. Did you mean &amp;#x27;processedFile&amp;#x27;?&lt;/p&gt; \n  \n\n**Problem:**  \n  \nThe function `processUploadedFile` is being used in `messages.service.ts`, but it is not defined anywhere.\n\n**Solution:**  \n  \nDefine the function `processUploadedFile` in a helper file or within `messages.service.ts`.\n\nExample Implementation:\n\n``` typescript\nconst processUploadedFile = async (file: Express.Multer.File) => {\n  return {\n    url: `/uploads/${file.filename}`, // Assuming file uploads are stored in '/uploads'\n    metadata: {\n      mimeType: file.mimetype,\n      size: file.size,\n    },\n  };\n};\n\n ```\n\n**Fix the usage:**  \nReplace:\n\n``` typescript\nconst processedFile = await processUploadedFile(file);\n\n ```\n\nwith:\n\n``` typescript\nconst processedFile = await processUploadedFile(file);\n\n ```\n\nand ensure the function is either imported from a helper module or defined in `messages.service.ts`.\n\n---\n\n### **Fix 2: Type Mismatch (****`string[]`** **vs.** **`ObjectId[]`****)**\n\nError:\n\n> &lt;p &gt;Type &amp;#x27;string\\[\\]&amp;#x27; is not assignable to type &amp;#x27;ObjectId\\[\\]&amp;#x27;. Type &amp;#x27;string&amp;#x27; is not assignable to type &amp;#x27;ObjectId&amp;#x27;.&lt;/p&gt; \n  \n\n**Problem:**  \n  \nIn `ICallSession` inside `socketHelper.ts`, the property `participants` is declared as:\n\n``` typescript\nparticipants: Types.ObjectId[];\n\n ```\n\nHowever, your service is passing an array of `string[]` instead of `Types.ObjectId[]`.\n\n**Solution:**  \n  \nConvert the string array to `ObjectId[]` before saving to MongoDB.\n\nModify this part:\n\n``` typescript\nconst callSession: ICallSession = {\n  _id: new Types.ObjectId(),\n  participants,\n  chat: new Types.ObjectId(chatId),\n  initiator: new Types.ObjectId(userId),\n  startTime: new Date(),\n  callType,\n  status: 'ringing',\n};\n\n ```\n\n**Fix:** Convert `participants` to `ObjectId[]`:\n\n``` typescript\nconst callSession: ICallSession = {\n  _id: new Types.ObjectId(),\n  participants: participants.map(id => new Types.ObjectId(id)), // Convert string[] to ObjectId[]\n  chat: new Types.ObjectId(chatId),\n  initiator: new Types.ObjectId(userId),\n  startTime: new Date(),\n  callType,\n  status: 'ringing',\n};\n\n ```\n\n---\n\n### **API & Socket Testing Documentation using Postman**\n\n#### **1\\. Setting Up Postman for API Testing**\n\nBefore testing, make sure your server is running:\n\n``` bash\nnpm run dev\n\n ```\n\nor\n\n``` bash\nnode index.js\n\n ```\n\n#### **2\\. API Testing**\n\n- **Base URL:** `http://localhost:5000/api/v1`\n    \n\n##### **User Authentication APIs**\n\n| Method | Endpoint | Description | Required Fields |\n| --- | --- | --- | --- |\n| `POST` | `/auth/register` | Register a new user | `name, email, password` |\n| `POST` | `/auth/login` | User login | `email, password` |\n\n##### **Chat APIs**\n\n| Method | Endpoint | Description | Required Fields |\n| --- | --- | --- | --- |\n| `POST` | `/chat` | Start a new chat | `userId` |\n| `GET` | `/chat` | Get all chats for logged-in user | \\- |\n| `POST` | `/chat/group` | Create a group chat | `name, users[]` |\n| `PATCH` | `/chat/rename` | Rename a group chat | `chatId, chatName` |\n| `PATCH` | `/chat/groupremove` | Remove user from group | `chatId, userId` |\n| `PATCH` | `/chat/groupadd` | Add user to group | `chatId, userId` |\n\n##### **Message APIs**\n\n| Method | Endpoint | Description | Required Fields |\n| --- | --- | --- | --- |\n| `POST` | `/messages` | Send a new message | `content, chatId` |\n| `GET` | `/messages/:chatId` | Get all messages of a chat | \\- |\n| `PATCH` | `/messages/:messageId/edit` | Edit a message | `content` |\n| `DELETE` | `/messages/:messageId` | Delete a message | \\- |\n| `PATCH` | `/messages/:messageId/read` | Mark message as read | \\- |\n| `PATCH` | `/messages/:messageId/pin` | Pin/unpin a message | \\- |\n| `GET` | `/messages/search?searchTerm=word` | Search messages | `searchTerm` |\n\n---\n\n#### **3\\. WebSocket Testing**\n\nYou can test WebSocket connections using **Postman** or **Socket.IO Client**.\n\n- **WebSocket URL:** `ws://localhost:5000`\n    \n- **Events & Payloads**\n    \n\n##### **Connecting a User**\n\n``` json\n{\n  \"event\": \"user-online\",\n  \"data\": \"userId\"\n}\n\n ```\n\n##### **Sending a Message**\n\n``` json\n{\n  \"event\": \"new-message\",\n  \"data\": {\n    \"content\": \"Hello!\",\n    \"chatId\": \"62dfsd23\"\n  }\n}\n\n ```\n\n##### **Typing Indicator**\n\n``` json\n{\n  \"event\": \"typing-start\",\n  \"data\": {\n    \"chatId\": \"62dfsd23\",\n    \"userId\": \"629sdj22\"\n  }\n}\n\n ```\n\n##### **Call Events**\n\n``` json\n{\n  \"event\": \"call-initiate\",\n  \"data\": {\n    \"chatId\": \"6298sd88\",\n    \"callType\": \"video\",\n    \"participants\": [\"user1Id\", \"user2Id\"]\n  }\n}\n\n ```\n\n---\n\n### **Final Steps**\n\n1. Ensure all files are correctly **imported and exported** in `index.ts` or `app.ts`.\n    \n2. npm start\n    \n3. Use Postman to **test API endpoints**.\n    \n4. Use Postman WebSocket or **Socket.IO client** to test real-time features.\n    \n5. Fix **any missing dependencies or import issues**.\n    \n\nNow, everything should be working properly! ðŸš€\n\nEndFragment"
		}
	]
}
{
	"info": {
		"_postman_id": "56e089f6-188d-42d1-a155-c20e7c278d76",
		"name": "BarBar",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26684367",
		"_collection_link": "https://alpha1-1602.postman.co/workspace/Bar-Bar-REST-API-WS~2e5ac130-951f-421e-bede-a612935fc071/collection/26684367-56e089f6-188d-42d1-a155-c20e7c278d76?action=share&source=collection_link&creator=26684367"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Social Login",
					"item": [
						{
							"name": "Google Login as USER",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"user@gmail.com\",\r\n  \"name\": \"Google User\",\r\n  \"type\": \"GOOGLE\",\r\n  \"fcmToken\": \"firebase_cloud_messaging_token_here\",\r\n  \"role\": \"USER\",\r\n  \"image\": \"https://example.com/profile.jpg\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{iphost}}/auth/login-for-social",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"auth",
										"login-for-social"
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Login As HOST",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"host@gmail.com\",\r\n  \"name\": \"Host Google User\",\r\n  \"type\": \"GOOGLE\",\r\n  \"fcmToken\": \"fcm_token_456\",\r\n  \"role\": \"HOST\",\r\n  \"image\": \"https://example.com/host.jpg\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{iphost}}/auth/login-for-social",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"auth",
										"login-for-social"
									]
								}
							},
							"response": []
						},
						{
							"name": "Apple Login As USER",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"newuser@icloud.com\",\r\n  \"name\": \"New Apple User\",\r\n  \"type\": \"APPLE\",\r\n  \"appId\": \"apple_id_123\",\r\n  \"role\": \"USER\",\r\n  \"image\": \"https://example.com/profile.jpg\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{iphost}}/auth/login-for-social",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"auth",
										"login-for-social"
									]
								}
							},
							"response": []
						},
						{
							"name": "Apple Login as HOST",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"host@icloud.com\",\r\n  \"name\": \"Host Apple User\",\r\n  \"type\": \"APPLE\",\r\n  \"appId\": \"apple_id_456\",\r\n  \"role\": \"HOST\",\r\n  \"image\": \"https://example.com/host.jpg\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{iphost}}/auth/login-for-social",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"auth",
										"login-for-social"
									]
								}
							},
							"response": []
						}
					],
					"description": "# Social Login API Testing Guide\n\n## Base URL\n\n```\nhttp://localhost:5000/api/v1\n\n ```\n\n## Endpoint\n\nPOST `/auth/login/social`\n\n## Testing Google Login\n\n### Request Headers\n\n```\nContent-Type: application/json\n\n ```\n\n### Google Login Request Body\n\n``` json\n{\n  \"email\": \"user@gmail.com\",\n  \"name\": \"Google User\",\n  \"type\": \"GOOGLE\",\n  \"fcmToken\": \"firebase_cloud_messaging_token_here\",\n  \"role\": \"USER\",\n  \"image\": \"https://example.com/profile.jpg\"\n}\n\n ```\n\n### Test Cases for Google Login\n\n1. {\"email\": \"newuser@gmail.com\",\"name\": \"New Google User\",\"type\": \"GOOGLE\",\"fcmToken\": \"fcm_token_123\",\"role\": \"USER\",\"image\": \"https://example.com/profile.jpg\"}\n    \n2. {\"email\": \"host@gmail.com\",\"name\": \"Host Google User\",\"type\": \"GOOGLE\",\"fcmToken\": \"fcm_token_456\",\"role\": \"HOST\",\"image\": \"https://example.com/host.jpg\"}\n    \n3. {\"email\": \"fail@gmail.com\",\"name\": \"Fail Test\",\"type\": \"GOOGLE\",\"role\": \"USER\"}\n    \n\n## Testing Apple Login\n\n### Apple Login Request Body\n\n``` json\n{\n  \"email\": \"user@icloud.com\",\n  \"name\": \"Apple User\",\n  \"type\": \"APPLE\",\n  \"appId\": \"apple_unique_id_here\",\n  \"role\": \"USER\",\n  \"image\": \"https://example.com/profile.jpg\"\n}\n\n ```\n\n### Test Cases for Apple Login\n\n1. {\"email\": \"newuser@icloud.com\",\"name\": \"New Apple User\",\"type\": \"APPLE\",\"appId\": \"apple_id_123\",\"role\": \"USER\",\"image\": \"https://example.com/profile.jpg\"}\n    \n2. {\"email\": \"host@icloud.com\",\"name\": \"Host Apple User\",\"type\": \"APPLE\",\"appId\": \"apple_id_456\",\"role\": \"HOST\",\"image\": \"https://example.com/host.jpg\"}\n    \n3. {\"email\": \"fail@icloud.com\",\"name\": \"Fail Test\",\"type\": \"APPLE\",\"role\": \"USER\"}\n    \n\n## Expected Responses\n\n### Success Response (200 OK)\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"User logged in successfully\",\n  \"data\": {\n    \"accessToken\": \"eyJhbGciOiJIUzI1...\",\n    \"refreshToken\": \"eyJhbGciOiJIUzI1...\",\n    \"user\": {\n      \"id\": \"507f1f77bcf86cd799439011\",\n      \"name\": \"Test User\",\n      \"email\": \"test@example.com\",\n      \"role\": \"USER\",\n      \"image\": \"https://example.com/profile.jpg\",\n      \"verified\": true,\n      \"status\": \"active\",\n      \"loginType\": \"GOOGLE\" // or \"APPLE\"\n    }\n  }\n}\n\n ```\n\n### Error Responses\n\n1. {\"success\": false,\"statusCode\": 400,\"message\": \"FCM token is required for Google login\",\"errorMessages\": \\[ { \"path\": \"fcmToken\", \"message\": \"FCM token is required for Google login\" }\\]}\n    \n\n## Postman Environment Setup\n\nCreate a new environment with these variables:\n\n```\nBASE_URL: http://localhost:5000/api/v1\nACCESS_TOKEN: <empty>\nREFRESH_TOKEN: <empty>\n\n ```\n\n## Postman Test Script\n\n``` javascript\n// Add this to the Tests tab\nconst response = pm.response.json();\nif (response.data && response.data.accessToken) {\n    pm.environment.set('ACCESS_TOKEN', response.data.accessToken);\n    pm.environment.set('REFRESH_TOKEN', response.data.refreshToken);\n}\n// Add basic validation\npm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\npm.test(\"Response has required fields\", function () {\n    pm.expect(response.data).to.have.property('accessToken');\n    pm.expect(response.data).to.have.property('refreshToken');\n    pm.expect(response.data).to.have.property('user');\n});\n\n ```"
				},
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4MTY2MmRkMTI0MDE4NmUyZDhmMiIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJsb2NhbHVzZXIxQGdtYWlsLmNvbSIsIm5hbWUiOiJMb2NhbCBVc2VyIDEiLCJpYXQiOjE3Mzg5MjUzNzcsImV4cCI6MTczOTAxMTc3N30.PlpoWX1HB--MGmyTngey928iK84jeFhktcGvqwgeKDA",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"nrbnayon@gmail.com\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/auth/login",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Salon 2",
									"type": "text"
								},
								{
									"key": "email",
									"value": "host2@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text",
									"disabled": true
								},
								{
									"key": "image",
									"type": "file",
									"src": "/C:/Users/nrbna/Desktop/b2.png"
								},
								{
									"key": "role",
									"value": "HOST",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{iphost}}/user/create-user",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"user",
								"create-user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Email/OTP",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"host2@gmail.com\",\r\n    \"oneTimeCode\": \"328259\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{iphost}}/auth/verify-email",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"auth",
								"verify-email"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWI2MGM0ODk1NWYxMWFlZTRmMTQzOSIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJucmJuYXlvbmlpM0BnbWFpbC5jb20iLCJuYW1lIjoiTmV3IFZuZG9yIFVwZGF0ZSIsImlhdCI6MTczODMxMzM5MywiZXhwIjoxNzM4Mzk5NzkzfQ.8t1ooiZzSrxurTfnck30j_74H3ps7UDi4J4z6lIXig8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"host2@gmail.com\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/user/set-password",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"user",
								"set-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Resend OTP",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"authupdate@gmail.com\"\r\n}"
						},
						"url": {
							"raw": "{{iphost}}/auth/resend-otp",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"auth",
								"resend-otp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Forget Password",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"nrbnayonii@gmail.com\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/auth/forgot-password",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"auth",
								"forgot-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "New AccessToken",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"nrbnayonii@gmail.com\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/auth/forgot-password",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"auth",
								"forgot-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "New AccessToken Copy",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"nrbnayonii@gmail.com\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/auth/forgot-password",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"auth",
								"forgot-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "97bb425f243893f594ddb5a9a6afdc3f0a4ccc855067f4c5784bb9e873fd1fa7",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"newPassword\": \"123456789\",\r\n    \"confirmPassword\":\"123456789\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/auth/reset-password",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"auth",
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Password Change",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM4MTI0ODQ1LCJleHAiOjE3MzgyMTEyNDV9.qKZRtDlfJfj3FuZP2HuNCKdSj7j2Y2TKzI-qWnZCOVU",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"currentPassword\":\"12345678\",\r\n    \"newPassword\": \"123456789\",\r\n    \"confirmPassword\":\"123456789\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/auth/change-password",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"auth",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Account",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTlhNjE2ZjU3M2EwOWEzNzMxNWYwYSIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJucmJuYXlvbmlpQGdtYWlsLmNvbSIsIm5hbWUiOiJOYXlvbiIsImlhdCI6MTczODEyNDk1NSwiZXhwIjoxNzM4MjExMzU1fQ.-GLFKPlg7MTGMqEngpvzubMxgHNP8Tsa12kXn4hxSvs",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"currentPassword\":\"12345678\",\r\n    \"newPassword\": \"123456789\",\r\n    \"confirmPassword\":\"123456789\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/auth/delete-account",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"auth",
								"delete-account"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM4MDU4Mzg3LCJleHAiOjE3MzgxNDQ3ODd9.11rLrV5687ybeOzpBQ0bl8JJWJ4I4cEHm_r_OyhvAcs",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:4000/api/v1/auth/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "# User API Documentation\n\nBase URL: `localhost:4000/api/v1`\n\n## 1\\. Create User\n\n**Endpoint:** `POST /user/create-user`  \n**Description:** Register a new user in the system\n\n### Request\n\n**Content-Type:** `multipart/form-data`\n\n**Required Fields:**\n\n- name (string): User's full name\n    \n- email (string): User's email address\n    \n- role (string): User's role\n    \n\n**Optional Fields:**\n\n- role (string): USER | ADMIN | HOST (defaults to USER)\n    \n- phone (string): Contact number\n    \n- image (file): Profile image\n    \n- postCode (string): Postal code\n    \n- gender (string): male | female | both\n    \n- dateOfBirth (string): ISO 8601 format\n    \n- address (object):\n    \n    - locationName (string)\n        \n    - latitude (number): -90 to 90\n        \n    - longitude (number): -180 to 180\n        \n\n### Sample Request\n\n``` json\n{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\",\n  \"phone\": \"+1234567890\",\n  \"postCode\": \"12345\",\n  \"gender\": \"male\",\n  \"dateOfBirth\": \"1990-01-01\",\n  \"address\": {\n    \"locationName\": \"Downtown\",\n    \"latitude\": 40.7128,\n    \"longitude\": -74.0060\n  }\n}\n\n ```\n\n### Success Response (200 OK)\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Please check your email to verify your account. We have sent you an OTP to complete the registration process.\",\n  \"data\": \"john.doe@example.com\"\n}\n\n ```\n\n###   \nError Responses\n\n- 400 Bad Request: Email already exists\n    \n- httpCopyPOST /api/v1/users/set-passwordContent-Type: application/json{ \"email\": \"testuser@example.com\", \"password\": \"yourSecurePassword\"}Key features of this implementation:The flow will be:EndFragment  \n    \n\n## 2\\. Verify Email\n\n**Endpoint:** `POST /auth/verify-email`  \n**Description:** Verify user's email using OTP\n\n### Request Body\n\n``` json\n{\n  \"email\": \"user@example.com\",\n  \"oneTimeCode\": \"123456\"\n}\n\n ```\n\n### Success Response (200 OK)\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Your email has been successfully verified. Your account is now fully activated.\",\n  \"data\": null\n}\n\n ```\n\n### Error Cases\n\n- {\"success\": false,\"statusCode\": 400,\"message\": \"You provided the wrong OTP.\"}\n    \n- {\"success\": false,\"statusCode\": 400,\"message\": \"OTP has expired. Please request a new one.\"}\n    \n\n#   \n3\\. StartFragmentAfter verifying the OTP through your Auth module, set the password:EndFragment\n\n**Endpoint:** `POST /user/set-password`  \n**Description:** Add Password for profile  \nContent-Type: application/json\n\n### Request Body\n\n``` json\n{\n  \"email\": \"testuser@example.com\",\n  \"password\": \"yourSecurePassword\"\n}\n\n ```\n\n### Success Response (200 OK)\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Password set successfully\",\n  \"data\": []\n}\n\n ```\n\n### Error Cases\n\n- {\"success\": false,\"statusCode\": 400,\"message\": \"You provided the wrong OTP.\"}\n    \n\n# {\"success\": false,\"statusCode\": 400,\"message\": \"OTP has expired. Please request a new one.\"}  \nAuthentication API Documentation\n\nBase URL: `localhost:4000/api/v1`\n\n## 1\\. User Login\n\n**Endpoint:** `POST /auth/login`  \n**Description:** Authenticate user and generate access/refresh tokens\n\n### Request Body\n\n``` json\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\"\n}\n\n ```\n\n### Success Response (200 OK)\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"User login successfully\",\n  \"data\": {\n    \"accessToken\": \"jwt_access_token\",\n    \"refreshToken\": \"jwt_refresh_token\"\n  }\n}\n\n ```\n\n### Error Cases\n\n1. {\"success\": false,\"statusCode\": 400,\"message\": \"Password is incorrect!\"}\n    \n2. {\"success\": false,\"statusCode\": 400,\"message\": \"Please verify your account, then try to login again\"}\n    \n3. {\"success\": false,\"statusCode\": 400,\"message\": \"You don't have permission to access this content.It looks like your account has been deactivated.\"}\n    \n\n## 3\\. Resend OTP\n\n**Endpoint:** `POST /auth/resend-otp`  \n**Description:** Resend verification OTP to user's email\n\n### Request Body\n\n``` json\n{\n  \"email\": \"user@example.com\"\n}\n\n ```\n\n### Success Response (200 OK)\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Generate OTP and send successfully\",\n  \"data\": {\n    \"success\": true,\n    \"message\": \"OTP sent successfully\"\n  }\n}\n\n ```\n\n## 4\\. Forgot Password\n\n**Endpoint:** `POST /auth/forgot-password`  \n**Description:** Initiate password reset process\n\n### Request Body\n\n``` json\n{\n  \"email\": \"user@example.com\"\n}\n\n ```\n\n### Success Response (200 OK)\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Please check your email, we send a OTP!\"\n}\n\n ```\n\n## 5\\. Reset Password\n\n**Endpoint:** `POST /auth/reset-password`  \n**Description:** Reset password using token\n\n### Headers\n\n```\nAuthorization: reset_token\n\n ```\n\n### Request Body\n\n``` json\n{\n  \"newPassword\": \"newPassword123\",\n  \"confirmPassword\": \"newPassword123\"\n}\n\n ```\n\n### Success Response (200 OK)\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Password reset successfully\"\n}\n\n ```\n\n### Error Cases\n\n1. {\"success\": false,\"statusCode\": 400,\"message\": \"New password and Confirm password doesn't match!\"}\n    \n2. {\"success\": false,\"statusCode\": 400,\"message\": \"Token expired, Please click again to the forget password\"}\n    \n\n## 6\\. Change Password\n\n**Endpoint:** `POST /auth/change-password`  \n**Description:** Change password while logged in  \n**Authentication:** Required\n\n### Request Body\n\n``` json\n{\n  \"currentPassword\": \"currentPass123\",\n  \"newPassword\": \"newPass123\",\n  \"confirmPassword\": \"newPass123\"\n}\n\n ```\n\n### Success Response (200 OK)\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Password changed successfully\"\n}\n\n ```\n\n### Error Cases\n\n1. {\"success\": false,\"statusCode\": 400,\"message\": \"Password is incorrect\"}\n    \n2. {\"success\": false,\"statusCode\": 400,\"message\": \"Please give different password from current password\"}\n    \n\n## 7\\. Delete Account\n\n**Endpoint:** `DELETE /auth/delete-account`  \n**Description:** Delete user account  \n**Authentication:** Required (USER or HOST role)\n\n### Success Response (200 OK)\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Account Deleted successfully\"\n}\n\n ```\n\n## 8\\. Refresh Token\n\n**Endpoint:** `POST /auth/refresh-token`  \n**Description:** Generate new access token using refresh token\n\n### Request Body\n\n``` json\n{\n  \"token\": \"refresh_token\"\n}\n\n ```\n\n### Success Response (200 OK)\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Generate Access Token successfully\",\n  \"data\": {\n    \"accessToken\": \"new_access_token\"\n  }\n}\n\n ```\n\n## 9\\. Logout\n\n**Endpoint:** `POST /auth/logout`  \n**Description:** Logout user and invalidate tokens  \n**Authentication:** Required\n\n### Success Response (200 OK)\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Logged out successfully 🚀\",\n  \"data\": null\n}\n\n ```\n\n2\\. Get User Profile\n\n**Endpoint:** `GET /user/profile`  \n**Description:** Retrieve logged-in user's profile  \n**Authentication:** Required (Bearer Token)\n\n### Headers\n\n```\nAuthorization: Bearer {token}\n\n ```\n\n### Success Response (200 OK)\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Profile data retrieved successfully\",\n  \"data\": {\n    \"_id\": \"user_id\",\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"phone\": \"+1234567890\",\n    \"role\": \"USER\",\n    \"status\": \"active\",\n    \"gender\": \"male\",\n    \"dateOfBirth\": \"1990-01-01T00:00:00.000Z\",\n    \"image\": \"path/to/image.jpg\",\n    \"createdAt\": \"2024-02-05T00:00:00.000Z\",\n    \"updatedAt\": \"2024-02-05T00:00:00.000Z\"\n  }\n}\n\n ```\n\n## 3\\. Update Profile\n\n**Endpoint:** `PATCH /user/update-profile`  \n**Description:** Update user profile information  \n**Authentication:** Required (Bearer Token)\n\n### Request\n\n**Content-Type:** `multipart/form-data`\n\n**Optional Fields:**\n\n- name (string)\n    \n- phone (string)\n    \n- image (file)\n    \n- postCode (string)\n    \n- country (string)\n    \n- dateOfBirth (string): ISO 8601 format\n    \n- address (object):\n    \n    - locationName (string)\n        \n    - latitude (number)\n        \n    - longitude (number)\n        \n\n### Sample Request\n\n``` json\n{\n  \"name\": \"John Smith\",\n  \"phone\": \"+1987654321\",\n  \"country\": \"USA\",\n  \"postCode\": \"54321\",\n  \"dateOfBirth\": \"1990-01-01\",\n  \"address\": {\n    \"locationName\": \"Uptown\",\n    \"latitude\": 40.7829,\n    \"longitude\": -73.9654\n  }\n}\n\n ```\n\n### Success Response (200 OK)\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Profile updated successfully\",\n  \"data\": {\n    // Updated user object\n  }\n}\n\n ```\n\n## 4\\. Get All Users\n\n**Endpoint:** `GET /user/get-all-users`  \n**Description:** Retrieve all users with pagination and filters  \n**Authentication:** Required (Bearer Token)\n\n### Query Parameters\n\n- searchTerm (string): Search by name, email, or phone\n    \n- page (number, default: 1): Page number\n    \n- limit (number, default: 10): Items per page\n    \n- sortBy (string, default: 'createdAt'): Field to sort by\n    \n- order (string, default: 'desc'): Sort order (asc/desc)\n    \n- status (string): Filter by status\n    \n- role (string): Filter by role\n    \n\n### Success Response (200 OK)\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"User retrieved successfully\",\n  \"data\": {\n    \"meta\": {\n      \"total\": 100,\n      \"limit\": 10,\n      \"totalPages\": 10,\n      \"currentPage\": 1\n    },\n    \"result\": [\n      // Array of user objects\n    ]\n  }\n}\n\n ```\n\n## 5\\. Get Single User\n\n**Endpoint:** `GET /user/get-all-users/:id`  \n**Description:** Retrieve a specific user by ID  \n**Authentication:** Required (Bearer Token, ADMIN only)\n\n### URL Parameters\n\n- id: User ID\n    \n\n### Success Response (200 OK)\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"User retrieved successfully\",\n  \"data\": {\n    // User object\n  }\n}\n\n ```\n\n## 6\\. Get Online Users\n\n**Endpoint:** `GET /user/online-users`  \n**Description:** Get list of currently online users  \n**Authentication:** Required (Bearer Token)\n\n### Success Response (200 OK)\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Online users retrieved successfully. Total: {count}\",\n  \"data\": [\n    {\n      \"name\": \"User Name\",\n      \"email\": \"user@example.com\",\n      \"profileImage\": \"path/to/image.jpg\"\n    }\n  ]\n}\n\n ```\n\n## 7\\. Update Online Status\n\n**Endpoint:** `PATCH /user/online-status`  \n**Description:** Update user's online status  \n**Authentication:** Required (Bearer Token)\n\n### Request Body\n\n``` json\n{\n  \"userId\": \"user_id\",\n  \"status\": true\n}\n\n ```\n\n### Success Response (200 OK)\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"User online status updated successfully to online/offline\",\n  \"data\": {\n    // Updated user object\n  }\n}\n\n ```\n\n## Testing Considerations\n\nTest Cases\n\n### 1\\. Authentication Flow Testing\n\n1. Register new user\n    \n2. Verify email with OTP\n    \n3. Login with credentials\n    \n4. Access protected route\n    \n5. Refresh token\n    \n6. Logout\n    \n7. Verify protected routes are inaccessible after logout\n    \n\n### 2\\. Password Management Testing\n\n1. Request password reset\n    \n2. Verify reset token validity\n    \n3. Reset password with valid token\n    \n4. Reset password with expired token\n    \n5. Change password while logged in\n    \n6. Attempt login with old password\n    \n7. Login with new password\n    \n\n### 3\\. Email Verification Testing\n\n1. Register new account\n    \n2. Attempt login before verification\n    \n3. Verify with correct OTP\n    \n4. Verify with incorrect OTP\n    \n5. Verify with expired OTP\n    \n6. Resend verification OTP\n    \n7. Verify with new OTP\n    \n\n### 4\\. Token Testing\n\n1. Access protected route without token\n    \n2. Access with invalid token\n    \n3. Access with expired token\n    \n4. Refresh token flow\n    \n5. Multiple token refresh attempts\n    \n6. Concurrent login sessions\n    \n\n### 5\\. Role-Based Access Testing\n\n1. Access admin routes with user token\n    \n2. Access user routes with admin token\n    \n3. Access host routes with user token\n    \n4. Delete account permission for different roles\n    \n\n### 6\\. Input Validation Testing\n\n1. Missing required fields\n    \n2. Invalid email format\n    \n3. Password strength requirements\n    \n4. Password confirmation mismatch\n    \n5. Invalid OTP format\n    \n6. Malformed tokens\n    \n\n### 7\\. Error Handling Testing\n\n1. Non-existent user login\n    \n2. Deactivated account login\n    \n3. Deleted account login\n    \n4. Multiple failed login attempts\n    \n5. Invalid token formats\n    \n6. Server errors\n    \n\n### 8\\. Security Testing\n\n1. SQL injection attempts\n    \n2. XSS attempts\n    \n3. CSRF protection\n    \n4. Rate limiting\n    \n5. Password encryption\n    \n6. Token expiration\n    \n7. Session handling\n    \n\n### 9\\. Edge Cases\n\n1. Concurrent password reset requests\n    \n2. Multiple verification attempts\n    \n3. Account deletion during active session\n    \n4. Password change during active session\n    \n5. Network interruptions during auth flow\n    \n\n### Postman Test Scripts\n\n``` javascript\n// Login Test\npm.test(\"Login Successful\", function () {\n    pm.response.to.have.status(200);\n    pm.expect(pm.response.json().data).to.have.property('accessToken');\n    pm.expect(pm.response.json().data).to.have.property('refreshToken');\n});\n// Token Validation\npm.test(\"Valid JWT Format\", function () {\n    const response = pm.response.json();\n    const token = response.data.accessToken;\n    pm.expect(token).to.match(/^[A-Za-z0-9-_]*\\.[A-Za-z0-9-_]*\\.[A-Za-z0-9-_]*$/);\n});\n// Error Response\npm.test(\"Invalid Credentials Error\", function () {\n    pm.response.to.have.status(400);\n    pm.expect(pm.response.json().message).to.equal(\"Password is incorrect!\");\n});\n\n ```\n\n### Environment Setup\n\n{\n\n\"base_url\": \"localhost:4000/api/v1\",\n\n\"access_token\": \"\",\n\n\"refresh_token\": \"\",\n\n\"reset_token\": \"\",\n\n\"test_email\": \"[test@example.com](https://mailto:test@example.com)\",\n\n\"test_password\": \"password123\"\n\n## }\n\n### Authentication Testing\n\n1. Test all protected routes without token\n    \n2. Test with invalid token\n    \n3. Test with expired token\n    \n4. Test with token having insufficient permissions\n    \n\n### Input Validation Testing\n\n1. Test required fields are truly required\n    \n2. Test field type validations\n    \n3. Test field length restrictions\n    \n4. Test email format validation\n    \n5. Test password strength requirements\n    \n6. Test date format validation\n    \n7. Test coordinate range validation\n    \n\n### File Upload Testing\n\n1. Test with valid image files\n    \n2. Test with invalid file types\n    \n3. Test with files exceeding size limit\n    \n4. Test with corrupt files\n    \n\n### Search and Filter Testing\n\n1. Test search with partial matches\n    \n2. Test search with special characters\n    \n3. Test with multiple filters\n    \n4. Test with invalid filter values\n    \n\n### Pagination Testing\n\n1. Test first page\n    \n2. Test last page\n    \n3. Test with different page sizes\n    \n4. Test with invalid page numbers\n    \n5. Test with invalid limit values\n    \n\n### Error Handling Testing\n\n1. Test with invalid user IDs\n    \n2. Test with non-existent users\n    \n3. Test with duplicate email registrations\n    \n4. Test with malformed JSON\n    \n5. Test with missing required fields\n    \n6. Test with invalid field types\n    \n\n### Performance Testing\n\n1. Test with large number of users\n    \n2. Test with large image files\n    \n3. Test concurrent requests\n    \n4. Test response times under load\n    \n\n### Security Testing\n\n1. Test for SQL injection\n    \n2. Test for XSS vulnerabilities\n    \n3. Test for CSRF vulnerabilities\n    \n4. Test rate limiting\n    \n5. Test role-based access control"
		},
		{
			"name": "UserDeviceLogs",
			"item": [
				{
					"name": "All Device logs",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM4MDU4Mzg3LCJleHAiOjE3MzgxNDQ3ODd9.11rLrV5687ybeOzpBQ0bl8JJWJ4I4cEHm_r_OyhvAcs",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:4000/api/v1/device/logs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"device",
								"logs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout One Device logs",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM4MDU4Mzg3LCJleHAiOjE3MzgxNDQ3ODd9.11rLrV5687ybeOzpBQ0bl8JJWJ4I4cEHm_r_OyhvAcs",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:4000/api/v1/device/logout/6798c1dd81b660154b0be85c",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"device",
								"logout",
								"6798c1dd81b660154b0be85c"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout All Device",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM4MDU4Mzg3LCJleHAiOjE3MzgxNDQ3ODd9.11rLrV5687ybeOzpBQ0bl8JJWJ4I4cEHm_r_OyhvAcs",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:4000/api/v1/device/logout-all",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"device",
								"logout-all"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Active Device logs",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM4MDU4Mzg3LCJleHAiOjE3MzgxNDQ3ODd9.11rLrV5687ybeOzpBQ0bl8JJWJ4I4cEHm_r_OyhvAcs",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:4000/api/v1/device/active-sessions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"device",
								"active-sessions"
							]
						}
					},
					"response": []
				}
			],
			"description": "Check where you device already login - RESTFull APIs"
		},
		{
			"name": "User Profile",
			"item": [
				{
					"name": "Update profile",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM5ZDNkYjg0ODFkOTNiODVmMjU5NyIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJucmJuYXlvbmlpNTU1NUBnbWFpbC5jb20iLCJuYW1lIjoiTmF5b24zMzMiLCJpYXQiOjE3Mzg3NTQxMTMsImV4cCI6MTczODg0MDUxM30.9gmdcLIjGYyZygBzLb2oicod_dRdv6cM6ARiSb9gjjM",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "image",
									"type": "file",
									"src": "postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e"
								}
							]
						},
						"url": {
							"raw": "{{iphost}}/user/update-profile",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"user",
								"update-profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU5ODdiZGQyN2EzMTc5ZWJiYmU0NSIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJob3N0MUBnbWFpbC5jb20iLCJuYW1lIjoiU2Fsb24gMSIsImlhdCI6MTczOTI3NTM4MSwiZXhwIjoxNzM5MzYxNzgxfQ.budy9WdXoE76J3ntUP0p_m048UZ4HF5gv20-xomAr8A",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{iphost}}/v1/user/get-all-users",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"v1",
								"user",
								"get-all-users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All User",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU5ODdiZGQyN2EzMTc5ZWJiYmU0NSIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJob3N0MUBnbWFpbC5jb20iLCJuYW1lIjoiU2Fsb24gMSIsImlhdCI6MTczOTI3NTM4MSwiZXhwIjoxNzM5MzYxNzgxfQ.budy9WdXoE76J3ntUP0p_m048UZ4HF5gv20-xomAr8A",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/user/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"user",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM4MTI1NTY3LCJleHAiOjE3MzgyMTE5Njd9.wPzQDreUe2YwOh7dqYOssWIq26eaxIX9QsK0yX6Bt8k",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/user/profile",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get online-users",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM4MTI1NTY3LCJleHAiOjE3MzgyMTE5Njd9.wPzQDreUe2YwOh7dqYOssWIq26eaxIX9QsK0yX6Bt8k",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/user/online-users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"user",
								"online-users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update online status",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM4MTI1NTY3LCJleHAiOjE3MzgyMTE5Njd9.wPzQDreUe2YwOh7dqYOssWIq26eaxIX9QsK0yX6Bt8k",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"67988dd2cbfcf1e344a3a21c\",\r\n    \"status\": true\r\n}\r\n"
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/user/online-status",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"user",
								"online-status"
							]
						}
					},
					"response": []
				}
			],
			"description": "# User Management API Documentation\n\n## Base URL\n\n```\nhttp://localhost:3000/api/v1/user\n\n ```\n\n## Authentication\n\nMost endpoints require authentication using a JWT token. Include the token in the Authorization header:\n\n```\nAuthorization: Bearer <your_jwt_token>\n\n ```\n\n## Endpoints\n\n## 1\\. Create User\n\n**Endpoint:** `POST /user/create-user`  \n**Description:** Register a new user in the system\n\n### Request\n\n**Content-Type:** `multipart/form-data`\n\n**Required Fields:**\n\n- name (string): User's full name\n    \n- email (string): User's email address\n    \n- password (string): Minimum 8 characters\n    \n\n**Optional Fields:**\n\n- role (string): USER | ADMIN | HOST (defaults to USER)\n    \n- phone (string): Contact number\n    \n- image (file): Profile image\n    \n- postCode (string): Postal code\n    \n- gender (string): male | female | both\n    \n- dateOfBirth (string): ISO 8601 format\n    \n- address (object):\n    \n    - locationName (string)\n        \n    - latitude (number): -90 to 90\n        \n    - longitude (number): -180 to 180\n        \n\n### Sample Request\n\n**Request Body:**\n\n``` json\n{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"role\": \"USER\",\n  \"phone\": \"+1234567890\",\n  \"postCode\": \"12345\",\n  \"address\": {\n    \"locationName\": \"123 Main St\",\n    \"latitude\": 40.7128,\n    \"longitude\": -74.0060\n  },\n  \"gender\": \"male\",\n  \"dateOfBirth\": \"1990-01-01\"\n}\n\n ```\n\n**Optional Fields:**\n\n- `password` (string, min 8 characters)\n    \n- `image` (file upload)\n    \n\n**Success Response:**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Please check your email to verify your account. We have sent you an OTP to complete the registration process.\",\n  \"data\": \"john@example.com\"\n}\n\n ```\n\n### Error Responses\n\n- 400 Bad Request: Email already exists\n    \n- 500 Internal Server Error: Registration failed  \n    \n\n## 2\\. Set Password\n\nSets or updates user password after email verification.\n\n**Endpoint:** `POST /set-password`  \n**Authentication:** Not required\n\n**Request Body:**\n\n``` json\n{\n  \"email\": \"john@example.com\",\n  \"password\": \"newPassword123\",\n  \"address\": {\n    \"locationName\": \"123 Main St\",\n    \"latitude\": 40.7128,\n    \"longitude\": -74.0060\n  }\n}\n\n ```\n\n**Success Response:**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Password set successfully. Now your account is fully activated\",\n  \"data\": {\n    \"accessToken\": \"jwt_token_here\",\n    \"data\": {\n      \"user_details_here\"\n    }\n  }\n}\n\n\n ```\n\n## 3\\. Update Profile\n\n**Endpoint:** `PATCH /user/update-profile`  \n**Description:** Update user profile information  \n**Authentication:** Required (Bearer Token)\n\n**Roles:** USER, HOST, ADMIN\n\n### Request\n\n**Content-Type:** `multipart/form-data`\n\n**Optional Fields:**\n\n- name (string)\n    \n- phone (string)\n    \n- image (file)\n    \n- postCode (string)\n    \n- country (string)\n    \n- dateOfBirth (string): ISO 8601 format\n    \n- address (object):\n    \n    - locationName (string)\n        \n    - latitude (number)\n        \n    - longitude (number)\n        \n\n**Request Body:**\n\n``` json\n{\n  \"name\": \"Updated Name\",\n  \"phone\": \"+1987654321\",\n  \"address\": {\n    \"locationName\": \"456 New St\",\n    \"latitude\": 40.7128,\n    \"longitude\": -74.0060\n  },\n  \"postCode\": \"54321\",\n  \"country\": \"USA\",\n  \"dateOfBirth\": \"1990-01-01\"\n}\n\n ```\n\n**Optional Fields:**\n\n- `image` (file upload)\n    \n- `email` (triggers verification)\n    \n\n**Success Response:**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Profile updated successfully\",\n  \"data\": {\n    \"updated_user_details\"\n  }\n}\n\n ```\n\n**Email/Phone Update Response:**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Profile updated successfully\",\n  \"data\": {\n    \"verificationRequired\": true,\n    \"message\": \"Please verify your new contact information with the OTP sent to your email.\"\n  }\n}\n\n ```\n\n## 4\\. Get All Users\n\n**Endpoint:** `GET /user/get-all-users`  \n**Description:** Retrieve all users with pagination and filters  \n**Authentication:** Required (Bearer Token)\n\n### Query Parameters\n\n- searchTerm (string): Search by name, email, or phone\n    \n- page (number, default: 1): Page number\n    \n- limit (number, default: 10): Items per page\n    \n- sortBy (string, default: 'createdAt'): Field to sort by\n    \n- order (string, default: 'desc'): Sort order (asc/desc)\n    \n- status (string): Filter by status\n    \n- role (string): Filter by role\n    \n\n**Success Response:**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Profile data retrieved successfully\",\n  \"data\": {\n    \"user_profile_details\"\n  }\n}\n\n ```\n\n### 5\\. Get All Users\n\nRetrieves a paginated list of users with optional filtering.\n\n**Endpoint:** `GET /get-all-users`  \n**Authentication:** Required  \n**Roles:** ADMIN, USER, HOST\n\n**Query Parameters:**\n\n- `searchTerm` (string): Search by name, email, or phone\n    \n- `page` (number, default: 1): Page number\n    \n- `limit` (number, default: 10): Items per page\n    \n- `sortBy` (string, default: 'createdAt'): Field to sort by\n    \n- `order` (string, default: 'desc'): Sort order ('asc' or 'desc')\n    \n- Additional filter parameters as needed\n    \n\n**Success Response:**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"User retrieved successfully\",\n  \"data\": {\n    \"meta\": {\n      \"total\": 100,\n      \"limit\": 10,\n      \"totalPages\": 10,\n      \"currentPage\": 1,\n      \"genderRatio\": {\n        \"male\": {\n          \"count\": 45,\n          \"percentage\": \"45.00%\"\n        },\n        \"female\": {\n          \"count\": 50,\n          \"percentage\": \"50.00%\"\n        },\n        \"both\": {\n          \"count\": 5,\n          \"percentage\": \"5.00%\"\n        }\n      }\n    },\n    \"result\": [\n      {\n        \"user_details\"\n      }\n    ]\n  }\n}\n\n ```\n\n### 6\\. Get Single User\n\nRetrieves details of a specific user.\n\n**Endpoint:** `GET /get-all-users/:id`  \n**Authentication:** Required  \n**Roles:** ADMIN\n\n**Success Response:**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"User retrieved successfully\",\n  \"data\": {\n    \"user_details\"\n  }\n}\n\n ```\n\n### 7\\. Get Online Users\n\nRetrieves a list of currently online users.\n\n**Endpoint:** `GET /online-users`  \n**Authentication:** Required  \n**Roles:** USER, ADMIN, HOST\n\n**Success Response:**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Online users retrieved successfully. Total: X\",\n  \"data\": [\n    {\n      \"name\": \"User Name\",\n      \"email\": \"user@example.com\",\n      \"profileImage\": \"image_url\"\n    }\n  ]\n}\n\n ```\n\n### 8\\. Update Online Status\n\nUpdates a user's online status.\n\n**Endpoint:** `PATCH /online-status`  \n**Authentication:** Required  \n**Roles:** USER, ADMIN, HOST\n\n**Request Body:**\n\n``` json\n{\n  \"userId\": \"user_id\",\n  \"status\": true\n}\n\n ```\n\n**Success Response:**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"User online status updated successfully to online/offline\",\n  \"data\": {\n    \"updated_user_details\"\n  }\n}\n\n ```\n\n## Error Responses\n\nAll endpoints may return the following error responses:\n\n### 400 Bad Request\n\n``` json\n{\n  \"success\": false,\n  \"statusCode\": 400,\n  \"message\": \"Error message describing the issue\"\n}\n\n ```\n\n### 401 Unauthorized\n\n``` json\n{\n  \"success\": false,\n  \"statusCode\": 401,\n  \"message\": \"You are not authorized\"\n}\n\n ```\n\n### 403 Forbidden\n\n``` json\n{\n  \"success\": false,\n  \"statusCode\": 403,\n  \"message\": \"Forbidden access\"\n}\n\n ```\n\n### 404 Not Found\n\n``` json\n{\n  \"success\": false,\n  \"statusCode\": 404,\n  \"message\": \"Resource not found\"\n}\n\n ```\n\n### 409 Conflict\n\n``` json\n{\n  \"success\": false,\n  \"statusCode\": 409,\n  \"message\": \"Resource already exists\"\n}\n\n ```\n\n### 500 Internal Server Error\n\n``` json\n{\n  \"success\": false,\n  \"statusCode\": 500,\n  \"message\": \"Internal server error\"\n}\n\n ```\n\nTesting Considerations\n\n### Authentication Testing\n\n1. Test all protected routes without token\n    \n2. Test with invalid token\n    \n3. Test with expired token\n    \n4. Test with token having insufficient permissions\n    \n\n### Input Validation Testing\n\n1. Test required fields are truly required\n    \n2. Test field type validations\n    \n3. Test field length restrictions\n    \n4. Test email format validation\n    \n5. Test password strength requirements\n    \n6. Test date format validation\n    \n7. Test coordinate range validation\n    \n\n### File Upload Testing\n\n1. Test with valid image files\n    \n2. Test with invalid file types\n    \n3. Test with files exceeding size limit\n    \n4. Test with corrupt files\n    \n\n### Search and Filter Testing\n\n1. Test search with partial matches\n    \n2. Test search with special characters\n    \n3. Test with multiple filters\n    \n4. Test with invalid filter values\n    \n\n### Pagination Testing\n\n1. Test first page\n    \n2. Test last page\n    \n3. Test with different page sizes\n    \n4. Test with invalid page numbers\n    \n5. Test with invalid limit values\n    \n\n### Error Handling Testing\n\n1. Test with invalid user IDs\n    \n2. Test with non-existent users\n    \n3. Test with duplicate email registrations\n    \n4. Test with malformed JSON\n    \n5. Test with missing required fields\n    \n6. Test with invalid field types\n    \n\n### Performance Testing\n\n1. Test with large number of users\n    \n2. Test with large image files\n    \n3. Test concurrent requests\n    \n4. Test response times under load\n    \n\n### Security Testing\n\n1. Test for SQL injection\n    \n2. Test for XSS vulnerabilities\n    \n3. Test for CSRF vulnerabilities\n    \n4. Test rate limiting\n    \n5. Test role-based access control"
		},
		{
			"name": "Category",
			"item": [
				{
					"name": "Create Category",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6IkhpIEJveXMiLCJpYXQiOjE3MzgyMTQwNTYsImV4cCI6MTczODMwMDQ1Nn0.O8-v5eS0xyI6durkcdgf0B3BdUGrp2wP18aOPsd5n0s",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Bal Cutting ",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e"
								}
							]
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/category/create-category",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"category",
								"create-category"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update category",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM4MTI1NTY3LCJleHAiOjE3MzgyMTE5Njd9.wPzQDreUe2YwOh7dqYOssWIq26eaxIX9QsK0yX6Bt8k",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "New Book Cutting",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e"
								}
							]
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/category/6799d14fa11ccc8b891a195e",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"category",
								"6799d14fa11ccc8b891a195e"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Categories",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept-encoding": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM4MTI1NTY3LCJleHAiOjE3MzgyMTE5Njd9.wPzQDreUe2YwOh7dqYOssWIq26eaxIX9QsK0yX6Bt8k",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "New Book Cutting",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e"
								}
							]
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/category",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"category"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one Category by ID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept-encoding": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM4MTI1NTY3LCJleHAiOjE3MzgyMTE5Njd9.wPzQDreUe2YwOh7dqYOssWIq26eaxIX9QsK0yX6Bt8k",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "New Book Cutting",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e"
								}
							]
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/category/6799dea26864f2e1aa32441c",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"category",
								"6799dea26864f2e1aa32441c"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete one Category by ID Copy",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM4MTI1NTY3LCJleHAiOjE3MzgyMTE5Njd9.wPzQDreUe2YwOh7dqYOssWIq26eaxIX9QsK0yX6Bt8k",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "New Book Cutting",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e"
								}
							]
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/category/6799d207a335d3634d6d0e0c",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"category",
								"6799d207a335d3634d6d0e0c"
							]
						}
					},
					"response": []
				}
			],
			"description": "Category can create Admin - RESTFull APIs"
		},
		{
			"name": "Banner",
			"item": [
				{
					"name": "Create",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6IkhpIEJveXMiLCJpYXQiOjE3MzgyMTQwNTYsImV4cCI6MTczODMwMDQ1Nn0.O8-v5eS0xyI6durkcdgf0B3BdUGrp2wP18aOPsd5n0s",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Offer Offer Offer 35",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e"
								},
								{
									"key": "type",
									"value": "USER",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/banner/create-banner",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"banner",
								"create-banner"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Banner By ID",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM4MTI1NTY3LCJleHAiOjE3MzgyMTE5Njd9.wPzQDreUe2YwOh7dqYOssWIq26eaxIX9QsK0yX6Bt8k",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Offer Offer Offer 4",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e",
									"disabled": true
								},
								{
									"key": "type",
									"value": "HOST",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/banner/6799eaf3d9568af0944593de",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"banner",
								"6799eaf3d9568af0944593de"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Banner",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept-encoding": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM4MTI1NTY3LCJleHAiOjE3MzgyMTE5Njd9.wPzQDreUe2YwOh7dqYOssWIq26eaxIX9QsK0yX6Bt8k",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "New Book Cutting",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e"
								}
							]
						},
						"url": {
							"raw": "{{iphost}}/banner",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"banner"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Banner by ID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept-encoding": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM4MTI1NTY3LCJleHAiOjE3MzgyMTE5Njd9.wPzQDreUe2YwOh7dqYOssWIq26eaxIX9QsK0yX6Bt8k",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "New Book Cutting",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e"
								}
							]
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/banner/6799eaf3d9568af0944593de",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"banner",
								"6799eaf3d9568af0944593de"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete one Banner by ID Copy",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM4MTI1NTY3LCJleHAiOjE3MzgyMTE5Njd9.wPzQDreUe2YwOh7dqYOssWIq26eaxIX9QsK0yX6Bt8k",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "New Book Cutting",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e"
								}
							]
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/banner/6799eaf3d9568af0944593de",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"banner",
								"6799eaf3d9568af0944593de"
							]
						}
					},
					"response": []
				}
			],
			"description": "Banner can create Admin - RESTFull APIs"
		},
		{
			"name": "Add Salon",
			"item": [
				{
					"name": "Services API Documentation",
					"item": [
						{
							"name": "Create without image",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU5ODdiZGQyN2EzMTc5ZWJiYmU0NSIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJob3N0MUBnbWFpbC5jb20iLCJuYW1lIjoiU2Fsb24gMSIsImlhdCI6MTczOTE2NDQxNywiZXhwIjoxNzM5MjUwODE3fQ.HYpjv75cE6QrX6EwVHJI2hgLUWTHnexoYn1V2xlna2A",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Premium Haircut 4\",\r\n  \"description\": \"A high-quality haircut service tailored to your style.\",\r\n  \"duration\": 45,\r\n  \"price\": 25.99,\r\n  \"maxAppointmentsPerSlot\": 5,\r\n  \"salon\": \"679b59bcec4c15525b3eaf6e\",\r\n  \"category\": \"679b101a408fb79d23088cdb\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{iphost}}/service/create",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"service",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create with image",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWI2MGM0ODk1NWYxMWFlZTRmMTQzOSIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJucmJuYXlvbmlpM0BnbWFpbC5jb20iLCJuYW1lIjoiTmV3IFZuZG9yIFVwZGF0ZSIsImlhdCI6MTczODMxMzM5MywiZXhwIjoxNzM4Mzk5NzkzfQ.8t1ooiZzSrxurTfnck30j_74H3ps7UDi4J4z6lIXig8",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e"
										},
										{
											"key": "name",
											"value": "Premium Balcut",
											"type": "text"
										},
										{
											"key": "description",
											"value": "A high-quality haircut service tailored to your style.",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "30",
											"type": "text"
										},
										{
											"key": "price",
											"value": "40",
											"type": "text"
										},
										{
											"key": "maxAppointmentsPerSlot",
											"value": "10",
											"type": "text"
										},
										{
											"key": "salon",
											"value": "65d6b5c9c3b48e001e8f567a",
											"type": "text"
										},
										{
											"key": "category",
											"value": "65d6b5f4c3b48e001e8f5681",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{iphost}}/service/create",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"service",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Services with searchTearm",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJucmJuYXlvbjFAZ21haWwuY29tIiwibmFtZSI6Ik93bmVyIiwiaWF0IjoxNzM4NjU4NDY3LCJleHAiOjE3Mzg3NDQ4Njd9.z6vWaWwB2rECvmsTEbZAx70n2zDaEwLD8b8Xgk8QS40",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e"
										},
										{
											"key": "name",
											"value": "Premium Balcut",
											"type": "text"
										},
										{
											"key": "description",
											"value": "A high-quality haircut service tailored to your style.",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "30",
											"type": "text"
										},
										{
											"key": "price",
											"value": "40",
											"type": "text"
										},
										{
											"key": "maxAppointmentsPerSlot",
											"value": "10",
											"type": "text"
										},
										{
											"key": "salon",
											"value": "65d6b5c9c3b48e001e8f567a",
											"type": "text"
										},
										{
											"key": "category",
											"value": "65d6b5f4c3b48e001e8f5681",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{iphost}}/service/all",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"service",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Service of A Salon By Salon ID",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWI2MGM0ODk1NWYxMWFlZTRmMTQzOSIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJucmJuYXlvbmlpM0BnbWFpbC5jb20iLCJuYW1lIjoiTmV3IFZuZG9yIFVwZGF0ZSIsImlhdCI6MTczODMxMzM5MywiZXhwIjoxNzM4Mzk5NzkzfQ.8t1ooiZzSrxurTfnck30j_74H3ps7UDi4J4z6lIXig8",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e"
										},
										{
											"key": "name",
											"value": "Premium Balcut",
											"type": "text"
										},
										{
											"key": "description",
											"value": "A high-quality haircut service tailored to your style.",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "30",
											"type": "text"
										},
										{
											"key": "price",
											"value": "40",
											"type": "text"
										},
										{
											"key": "maxAppointmentsPerSlot",
											"value": "10",
											"type": "text"
										},
										{
											"key": "salon",
											"value": "65d6b5c9c3b48e001e8f567a",
											"type": "text"
										},
										{
											"key": "category",
											"value": "65d6b5f4c3b48e001e8f5681",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{iphost}}/service/salon/65d6b5c9c3b48e001e8f567a",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"service",
										"salon",
										"65d6b5c9c3b48e001e8f567a"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Service By Service ID",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWI2MGM0ODk1NWYxMWFlZTRmMTQzOSIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJucmJuYXlvbmlpM0BnbWFpbC5jb20iLCJuYW1lIjoiTmV3IFZuZG9yIFVwZGF0ZSIsImlhdCI6MTczODMxMzM5MywiZXhwIjoxNzM4Mzk5NzkzfQ.8t1ooiZzSrxurTfnck30j_74H3ps7UDi4J4z6lIXig8",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e"
										},
										{
											"key": "name",
											"value": "Premium Balcut",
											"type": "text"
										},
										{
											"key": "description",
											"value": "A high-quality haircut service tailored to your style.",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "30",
											"type": "text"
										},
										{
											"key": "price",
											"value": "40",
											"type": "text"
										},
										{
											"key": "maxAppointmentsPerSlot",
											"value": "10",
											"type": "text"
										},
										{
											"key": "salon",
											"value": "65d6b5c9c3b48e001e8f567a",
											"type": "text"
										},
										{
											"key": "category",
											"value": "65d6b5f4c3b48e001e8f5681",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{iphost}}/service/679c9281b69f975e93fe2e97",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"service",
										"679c9281b69f975e93fe2e97"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Service By Service ID",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWI2MGM0ODk1NWYxMWFlZTRmMTQzOSIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJucmJuYXlvbmlpM0BnbWFpbC5jb20iLCJuYW1lIjoiTmV3IFZuZG9yIFVwZGF0ZSIsImlhdCI6MTczODMxMzM5MywiZXhwIjoxNzM4Mzk5NzkzfQ.8t1ooiZzSrxurTfnck30j_74H3ps7UDi4J4z6lIXig8",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/nrbna/Desktop/b2.png"
										},
										{
											"key": "name",
											"value": "Premium Balcut 10",
											"type": "text"
										},
										{
											"key": "description",
											"value": "A high-quality haircut service tailored to your style.",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "30",
											"type": "text"
										},
										{
											"key": "price",
											"value": "400",
											"type": "text"
										},
										{
											"key": "maxAppointmentsPerSlot",
											"value": "100",
											"type": "text"
										},
										{
											"key": "salon",
											"value": "65d6b5c9c3b48e001e8f567a",
											"type": "text"
										},
										{
											"key": "category",
											"value": "65d6b5f4c3b48e001e8f5681",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{iphost}}/service/update/679c90fbce423457c6fd66e2",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"service",
										"update",
										"679c90fbce423457c6fd66e2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Service By Service ID",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWI2MGM0ODk1NWYxMWFlZTRmMTQzOSIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJucmJuYXlvbmlpM0BnbWFpbC5jb20iLCJuYW1lIjoiTmV3IFZuZG9yIFVwZGF0ZSIsImlhdCI6MTczODMxMzM5MywiZXhwIjoxNzM4Mzk5NzkzfQ.8t1ooiZzSrxurTfnck30j_74H3ps7UDi4J4z6lIXig8",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/nrbna/Desktop/b2.png"
										},
										{
											"key": "name",
											"value": "Premium Balcut 10",
											"type": "text"
										},
										{
											"key": "description",
											"value": "A high-quality haircut service tailored to your style.",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "30",
											"type": "text"
										},
										{
											"key": "price",
											"value": "400",
											"type": "text"
										},
										{
											"key": "maxAppointmentsPerSlot",
											"value": "100",
											"type": "text"
										},
										{
											"key": "salon",
											"value": "65d6b5c9c3b48e001e8f567a",
											"type": "text"
										},
										{
											"key": "category",
											"value": "65d6b5f4c3b48e001e8f5681",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{iphost}}/service/delete/679c90fbce423457c6fd66e2",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"service",
										"delete",
										"679c90fbce423457c6fd66e2"
									]
								}
							},
							"response": []
						}
					],
					"description": "# Services API Documentation\n\n## Base URL\n\n```\nhttp://localhost:3000/api/v1/service\n\n ```\n\n## Authentication\n\nAll endpoints require authentication via JWT token in the Authorization header:\n\n```\nAuthorization: Bearer <your_jwt_token>\n\n ```\n\n## Endpoints\n\n### 1\\. Create Service\n\nCreate a new service for a salon.\n\n**Endpoint:** `POST /create`  \n**Authentication:** Required (HOST role)  \n**Content-Type:** `multipart/form-data`\n\n**Request Body:**\n\n``` json\n{\n  \"name\": \"Haircut and Styling\",\n  \"description\": \"Professional haircut and styling service by experienced stylists\",\n  \"duration\": 60,\n  \"price\": 50.00,\n  \"maxAppointmentsPerSlot\": 1,\n  \"salon\": \"65abc123def456gh789ijklm\",\n  \"category\": \"65abc123def456gh789ijkln\",\n  \"status\": \"active\",\n  \"image\": \"(file upload)\"\n}\n\n ```\n\n**Success Response:**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 201,\n  \"message\": \"Service created successfully\",\n  \"data\": {\n    \"_id\": \"65abc123def456gh789ijklo\",\n    \"name\": \"Haircut and Styling\",\n    \"description\": \"Professional haircut and styling service by experienced stylists\",\n    \"duration\": 60,\n    \"price\": 50.00,\n    \"maxAppointmentsPerSlot\": 1,\n    \"salon\": {\n      \"_id\": \"65abc123def456gh789ijklm\",\n      \"name\": \"Luxury Salon\",\n      \"address\": \"123 Main St\",\n      \"phone\": \"+1234567890\",\n      \"status\": \"active\"\n    },\n    \"category\": {\n      \"_id\": \"65abc123def456gh789ijkln\",\n      \"name\": \"Hair Services\",\n      \"description\": \"All hair related services\",\n      \"status\": \"active\"\n    },\n    \"image\": \"/uploads/images/haircut-service.jpg\",\n    \"status\": \"active\",\n    \"rating\": 0,\n    \"reviewCount\": 0,\n    \"createdAt\": \"2024-02-04T12:00:00.000Z\",\n    \"updatedAt\": \"2024-02-04T12:00:00.000Z\"\n  }\n}\n\n ```\n\n### 2\\. Get All Services\n\nRetrieve all services with pagination, filtering, and search capabilities.\n\n**Endpoint:** `GET /all`  \n**Authentication:** Required (ADMIN, HOST, USER roles)\n\n**Query Parameters:**\n\n- `page`: Page number (default: 1)\n    \n- `limit`: Items per page (default: 10)\n    \n- `sortBy`: Field to sort by (default: createdAt)\n    \n- `sortOrder`: Sort order (asc/desc, default: desc)\n    \n- `searchTerm`: Search in name, description\n    \n- `price[min]`: Minimum price\n    \n- `price[max]`: Maximum price\n    \n- `category`: Category ID\n    \n- `duration`: Service duration\n    \n\n**Example Request:**\n\n```\nGET /all?page=1&limit=10&sortBy=price&sortOrder=asc&searchTerm=haircut&price[min]=20&price[max]=100&category=65abc123def456gh789ijkln\n\n ```\n\n**Success Response:**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Services retrieved successfully\",\n  \"data\": {\n    \"meta\": {\n      \"total\": 50,\n      \"page\": 1,\n      \"limit\": 10,\n      \"totalPages\": 5\n    },\n    \"data\": [\n      {\n        \"_id\": \"65abc123def456gh789ijklo\",\n        \"name\": \"Haircut and Styling\",\n        \"description\": \"Professional haircut and styling service\",\n        \"duration\": 60,\n        \"price\": 50.00,\n        \"maxAppointmentsPerSlot\": 1,\n        \"salon\": {\n          \"_id\": \"65abc123def456gh789ijklm\",\n          \"name\": \"Luxury Salon\",\n          \"address\": \"123 Main St\",\n          \"phone\": \"+1234567890\",\n          \"status\": \"active\"\n        },\n        \"category\": {\n          \"_id\": \"65abc123def456gh789ijkln\",\n          \"name\": \"Hair Services\",\n          \"description\": \"All hair related services\",\n          \"status\": \"active\"\n        },\n        \"image\": \"/uploads/images/haircut-service.jpg\",\n        \"status\": \"active\",\n        \"rating\": 4.5,\n        \"reviewCount\": 10,\n        \"createdAt\": \"2024-02-04T12:00:00.000Z\",\n        \"updatedAt\": \"2024-02-04T12:00:00.000Z\"\n      }\n      // ... more services\n    ]\n  }\n}\n\n ```\n\n### 3\\. Get Salon Services\n\nRetrieve all services for a specific salon.\n\n**Endpoint:** `GET /salon/:salonId`  \n**Authentication:** Required (ADMIN, HOST, USER roles)\n\n**Query Parameters:**\n\n- `searchTerm`: Search in name, description\n    \n\n**Example Request:**\n\n```\nGET /salon/65abc123def456gh789ijklm?searchTerm=haircut\n\n ```\n\n**Success Response:**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Services retrieved successfully\",\n  \"data\": [\n    {\n      \"_id\": \"65abc123def456gh789ijklo\",\n      \"name\": \"Haircut and Styling\",\n      \"description\": \"Professional haircut and styling service\",\n      \"duration\": 60,\n      \"price\": 50.00,\n      \"maxAppointmentsPerSlot\": 1,\n      \"category\": {\n        \"_id\": \"65abc123def456gh789ijkln\",\n        \"name\": \"Hair Services\",\n        \"description\": \"All hair related services\",\n        \"status\": \"active\"\n      },\n      \"image\": \"/uploads/images/haircut-service.jpg\",\n      \"status\": \"active\",\n      \"rating\": 4.5,\n      \"reviewCount\": 10\n    }\n    // ... more services\n  ]\n}\n\n ```\n\n### 4\\. Get Service by ID\n\nRetrieve a specific service by its ID.\n\n**Endpoint:** `GET /:id`  \n**Authentication:** Required (ADMIN, HOST, USER roles)\n\n**Example Request:**\n\n```\nGET /65abc123def456gh789ijklo\n\n ```\n\n**Success Response:**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Service retrieved successfully\",\n  \"data\": {\n    \"_id\": \"65abc123def456gh789ijklo\",\n    \"name\": \"Haircut and Styling\",\n    \"description\": \"Professional haircut and styling service\",\n    \"duration\": 60,\n    \"price\": 50.00,\n    \"maxAppointmentsPerSlot\": 1,\n    \"salon\": {\n      \"_id\": \"65abc123def456gh789ijklm\",\n      \"name\": \"Luxury Salon\",\n      \"address\": \"123 Main St\",\n      \"phone\": \"+1234567890\",\n      \"status\": \"active\"\n    },\n    \"category\": {\n      \"_id\": \"65abc123def456gh789ijkln\",\n      \"name\": \"Hair Services\",\n      \"description\": \"All hair related services\",\n      \"status\": \"active\"\n    },\n    \"image\": \"/uploads/images/haircut-service.jpg\",\n    \"status\": \"active\",\n    \"rating\": 4.5,\n    \"reviewCount\": 10\n  }\n}\n\n ```\n\n### 5\\. Update Service\n\nUpdate an existing service.\n\n**Endpoint:** `PATCH /update/:id`  \n**Authentication:** Required (HOST role)  \n**Content-Type:** `multipart/form-data`\n\n**Request Body:** (all fields optional)\n\n``` json\n{\n  \"name\": \"Premium Haircut and Styling\",\n  \"description\": \"Updated description for the service\",\n  \"duration\": 75,\n  \"price\": 60.00,\n  \"maxAppointmentsPerSlot\": 2,\n  \"category\": \"65abc123def456gh789ijkln\",\n  \"status\": \"active\",\n  \"image\": \"(file upload)\"\n}\n\n ```\n\n**Success Response:**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Service updated successfully\",\n  \"data\": {\n    \"_id\": \"65abc123def456gh789ijklo\",\n    \"name\": \"Premium Haircut and Styling\",\n    \"description\": \"Updated description for the service\",\n    \"duration\": 75,\n    \"price\": 60.00,\n    \"maxAppointmentsPerSlot\": 2,\n    \"salon\": \"65abc123def456gh789ijklm\",\n    \"category\": \"65abc123def456gh789ijkln\",\n    \"image\": \"/uploads/images/updated-haircut-service.jpg\",\n    \"status\": \"active\",\n    \"rating\": 4.5,\n    \"reviewCount\": 10,\n    \"updatedAt\": \"2024-02-04T13:00:00.000Z\"\n  }\n}\n\n ```\n\n### 6\\. Delete Service\n\nDelete a service by its ID.\n\n**Endpoint:** `DELETE /delete/:id`  \n**Authentication:** Required (HOST, ADMIN roles)\n\n**Example Request:**\n\n```\nDELETE /65abc123def456gh789ijklo\n\n ```\n\n**Success Response:**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Service deleted successfully\",\n  \"data\": {\n    \"_id\": \"65abc123def456gh789ijklo\",\n    \"name\": \"Premium Haircut and Styling\",\n    \"status\": \"active\"\n    // ... other service data\n  }\n}\n\n ```\n\n## Error Responses\n\nAll endpoints may return the following error responses:\n\n**401 Unauthorized:**\n\n``` json\n{\n  \"success\": false,\n  \"statusCode\": 401,\n  \"message\": \"You are not authorized\",\n  \"errorMessages\": [\n    {\n      \"path\": \"\",\n      \"message\": \"You are not authorized\"\n    }\n  ]\n}\n\n ```\n\n**404 Not Found:**\n\n``` json\n{\n  \"success\": false,\n  \"statusCode\": 404,\n  \"message\": \"Service not found\",\n  \"errorMessages\": [\n    {\n      \"path\": \"id\",\n      \"message\": \"Service not found\"\n    }\n  ]\n}\n\n ```\n\n**400 Bad Request:**\n\n``` json\n{\n  \"success\": false,\n  \"statusCode\": 400,\n  \"message\": \"Validation Error\",\n  \"errorMessages\": [\n    {\n      \"path\": \"duration\",\n      \"message\": \"Minimum duration is 15 minutes\"\n    }\n  ]\n}\n\n ```"
				},
				{
					"name": "Appointments",
					"item": [
						{
							"name": "1. User Create a Appointment",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4MTY2MmRkMTI0MDE4NmUyZDhmMiIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJsb2NhbHVzZXIxQGdtYWlsLmNvbSIsIm5hbWUiOiJMb2NhbCBVc2VyIDEiLCJpYXQiOjE3MzkxNjUwNTMsImV4cCI6MTczOTI1MTQ1M30.5CeNeu9gpZXUGeAmv6DyW0-Nb77QWbQl4xLuEv_OqXo",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    {\r\n    \"service\": \"67a98b2b1df66803e6eba032\",\r\n    \"appointmentDate\": \"2025-02-11\",\r\n    \"startTime\": \"09:00\",\r\n    \"payment\": {\r\n        \"method\": \"cash\"\r\n    },\r\n    \"notes\": \"First time customer\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{iphost}}/appointment/create",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"appointment",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Get Available Time Slots",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4MTY2MmRkMTI0MDE4NmUyZDhmMiIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJsb2NhbHVzZXIxQGdtYWlsLmNvbSIsIm5hbWUiOiJMb2NhbCBVc2VyIDEiLCJpYXQiOjE3MzkxNjUwNTMsImV4cCI6MTczOTI1MTQ1M30.5CeNeu9gpZXUGeAmv6DyW0-Nb77QWbQl4xLuEv_OqXo",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{iphost}}/appointment/available-slots/67a5d0c23b6ece72526878d1/67a98b2b1df66803e6eba032/2025-02-11",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"appointment",
										"available-slots",
										"67a5d0c23b6ece72526878d1",
										"67a98b2b1df66803e6eba032",
										"2025-02-11"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Get User's Appointments",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4MTY2MmRkMTI0MDE4NmUyZDhmMiIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJsb2NhbHVzZXIxQGdtYWlsLmNvbSIsIm5hbWUiOiJMb2NhbCBVc2VyIDEiLCJpYXQiOjE3MzkxNjUwNTMsImV4cCI6MTczOTI1MTQ1M30.5CeNeu9gpZXUGeAmv6DyW0-Nb77QWbQl4xLuEv_OqXo",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"service\": \"679d939c573af0f843272f13\",\r\n  \"appointmentDate\": \"2025-03-10\",\r\n  \"startTime\": \"09:30\",\r\n  \"payment\": {\r\n    \"method\": \"cash\"\r\n  },\r\n  \"notes\": \"First time customer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{iphost}}/appointment/my-appointments",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"appointment",
										"my-appointments"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Get Salon's Appointments By Salon ID HOST Route",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU5ODdiZGQyN2EzMTc5ZWJiYmU0NSIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJob3N0MUBnbWFpbC5jb20iLCJuYW1lIjoiU2Fsb24gMSIsImlhdCI6MTczOTE3NDA5NiwiZXhwIjoxNzM5MjYwNDk2fQ.ywS4cD1iJynAnX2hKCf1mi6qLpJltDPj4uwEz5yOKIQ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// GET http://your-api/api/v1/appointments/salon/salonId123\r\n// Headers:\r\n//   Authorization: Bearer {token}\r\n\r\n// Query Parameters (optional):\r\n//   ?status=confirmed\r\n//   ?date=2024-03-10\r\n//   ?serviceId=serviceId123\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{iphost}}/appointment/salon/679b59bcec4c15525b3eaf6e?status=pending",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"appointment",
										"salon",
										"679b59bcec4c15525b3eaf6e"
									],
									"query": [
										{
											"key": "status",
											"value": "pending"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Update Appointment Status HOST Route",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU5ODdiZGQyN2EzMTc5ZWJiYmU0NSIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJob3N0MUBnbWFpbC5jb20iLCJuYW1lIjoiU2Fsb24gMSIsImlhdCI6MTczOTE3NDA5NiwiZXhwIjoxNzM5MjYwNDk2fQ.ywS4cD1iJynAnX2hKCf1mi6qLpJltDPj4uwEz5yOKIQ",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"confirmed\",\r\n    \"notes\": \"Please come in salon within time\"\r\n}"
								},
								"url": {
									"raw": "{{iphost}}/appointment/67a9af17b09ca736d4a1155e/status",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"appointment",
										"67a9af17b09ca736d4a1155e",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Reschedule Appointment User",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4MTY2MmRkMTI0MDE4NmUyZDhmMiIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJsb2NhbHVzZXIxQGdtYWlsLmNvbSIsIm5hbWUiOiJMb2NhbCBVc2VyIDEiLCJpYXQiOjE3MzkxNjUwNTMsImV4cCI6MTczOTI1MTQ1M30.5CeNeu9gpZXUGeAmv6DyW0-Nb77QWbQl4xLuEv_OqXo",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"appointmentDate\": \"2025-02-11\",\r\n    \"startTime\": \"10:00\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{iphost}}/appointment/67a9af17b09ca736d4a1155e/reschedule",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"appointment",
										"67a9af17b09ca736d4a1155e",
										"reschedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Confirm Cash Payment",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4MTY2MmRkMTI0MDE4NmUyZDhmMiIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJsb2NhbHVzZXIxQGdtYWlsLmNvbSIsIm5hbWUiOiJMb2NhbCBVc2VyIDEiLCJpYXQiOjE3MzkxNjUwNTMsImV4cCI6MTczOTI1MTQ1M30.5CeNeu9gpZXUGeAmv6DyW0-Nb77QWbQl4xLuEv_OqXo",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"completed\",\r\n  \"payment\": {\r\n    \"method\": \"cash\",\r\n    \"status\": \"paid\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{iphost}}/appointment/67a9af17b09ca736d4a1155e/confirm-cash-payment",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"appointment",
										"67a9af17b09ca736d4a1155e",
										"confirm-cash-payment"
									]
								}
							},
							"response": []
						}
					],
					"description": "# Salon Appointment Management API Documentation\n\nBase URL: `http://localhost:3000/api/v1`\n\n## Authentication\n\nAll endpoints require authentication via Bearer token in the Authorization header:\n\n```\nAuthorization: Bearer <your_access_token>\n\n ```\n\n## Endpoints\n\n### 1\\. Create Appointment\n\nCreate a new appointment for a service.\n\n**Endpoint:** `POST /appointment/create`  \n**Auth Required:** Yes (User role)\n\n**Request Body:**\n\n``` json\n{\n    \"service\": \"64f89a7b2a7c672bcc41a111\",\n    \"appointmentDate\": \"2025-02-15\",\n    \"startTime\": \"14:00\",\n    \"payment\": {\n        \"method\": \"cash\"\n    },\n    \"notes\": \"First time customer\"\n}\n\n ```\n\n**Successful Response (201 Created):**\n\n``` json\n{\n    \"success\": true,\n    \"statusCode\": 201,\n    \"message\": \"Appointment created successfully\",\n    \"data\": {\n        \"appointmentId\": \"#AB123C\",\n        \"user\": \"64f89a7b2a7c672bcc41a222\",\n        \"service\": \"64f89a7b2a7c672bcc41a111\",\n        \"salon\": \"64f89a7b2a7c672bcc41a333\",\n        \"appointmentDate\": \"2025-02-15T00:00:00.000Z\",\n        \"startTime\": \"14:00\",\n        \"endTime\": \"15:00\",\n        \"status\": \"pending\",\n        \"payment\": {\n            \"method\": \"cash\",\n            \"status\": \"pending\",\n            \"amount\": 100,\n            \"currency\": \"USD\"\n        },\n        \"notes\": \"First time customer\",\n        \"reminderSent\": false,\n        \"rescheduleCount\": 0,\n        \"duration\": 60,\n        \"price\": 100\n    }\n}\n\n ```\n\n### 2\\. Get Available Time Slots\n\nGet available appointment slots for a specific service on a given date.\n\n**Endpoint:** `GET /appointment/available-slots/:salonId/:serviceId/:date`  \n**Auth Required:** Yes (User or Host role)\n\n**URL Parameters:**\n\n- salonId: Salon ID\n    \n- serviceId: Service ID\n    \n- date: Date in YYYY-MM-DD format\n    \n\n**Successful Response (200 OK):**\n\n``` json\n{\n    \"success\": true,\n    \"statusCode\": 200,\n    \"message\": \"Available time slots retrieved successfully\",\n    \"data\": [\n        {\n            \"startTime\": \"09:00\",\n            \"endTime\": \"10:00\",\n            \"available\": true,\n            \"remainingSlots\": 2\n        },\n        {\n            \"startTime\": \"10:00\",\n            \"endTime\": \"11:00\",\n            \"available\": true,\n            \"remainingSlots\": 1\n        }\n    ]\n}\n\n ```\n\n### 3\\. Get My Appointments\n\nGet appointments for the authenticated user.\n\n**Endpoint:** `GET /appointment/my-appointments`  \n**Auth Required:** Yes (User role)\n\n**Query Parameters (optional):**\n\n- status: Filter by status (pending/confirmed/cancelled/completed/no-show)\n    \n- date: Filter by date (YYYY-MM-DD)\n    \n- upcoming: true/false\n    \n\n**Example:** `/appointments/my-appointments?status=pending&upcoming=true`\n\n**Successful Response (200 OK):**\n\n``` json\n{\n    \"success\": true,\n    \"statusCode\": 200,\n    \"message\": \"Appointments retrieved successfully\",\n    \"data\": [\n        {\n            \"appointmentId\": \"#AB123C\",\n            \"service\": {\n                \"_id\": \"64f89a7b2a7c672bcc41a111\",\n                \"name\": \"Haircut\",\n                \"price\": 100\n            },\n            \"salon\": {\n                \"_id\": \"64f89a7b2a7c672bcc41a333\",\n                \"name\": \"Super Salon\"\n            },\n            \"appointmentDate\": \"2025-02-15T00:00:00.000Z\",\n            \"startTime\": \"14:00\",\n            \"endTime\": \"15:00\",\n            \"status\": \"pending\",\n            \"payment\": {\n                \"method\": \"cash\",\n                \"status\": \"pending\",\n                \"amount\": 100\n            }\n        }\n    ]\n}\n\n ```\n\n### 4\\. Get Salon Appointments\n\nGet all appointments for a specific salon.\n\n**Endpoint:** `GET /appointment/salon/:salonId`  \n**Auth Required:** Yes (Host role)\n\n**Query Parameters (optional):**\n\n- status: Filter by status\n    \n- date: Filter by date (YYYY-MM-DD)\n    \n- serviceId: Filter by service\n    \n\n**Example:** `/appointment/salon/64f89a7b2a7c672bcc41a333?date=2025-02-15&status=confirmed`\n\n**Successful Response (200 OK):**\n\n``` json\n{\n    \"success\": true,\n    \"statusCode\": 200,\n    \"message\": \"Salon appointments retrieved successfully\",\n    \"data\": [\n        {\n            \"appointmentId\": \"#AB123C\",\n            \"user\": {\n                \"_id\": \"64f89a7b2a7c672bcc41a222\",\n                \"name\": \"John Doe\"\n            },\n            \"service\": {\n                \"_id\": \"64f89a7b2a7c672bcc41a111\",\n                \"name\": \"Haircut\"\n            },\n            \"appointmentDate\": \"2025-02-15T00:00:00.000Z\",\n            \"startTime\": \"14:00\",\n            \"status\": \"confirmed\"\n        }\n    ]\n}\n\n ```\n\n### 5\\. Update Appointment Status\n\nUpdate the status of an appointment.\n\n**Endpoint:** `PATCH /appointment/:id/status`  \n**Auth Required:** Yes (Host role)\n\n**Request Body:**\n\n``` json\n{\n    \"status\": \"confirmed\",\n    \"notes\": \"Customer confirmed via phone\"\n}\n\n ```\n\n**Successful Response (200 OK):**\n\n``` json\n{\n    \"success\": true,\n    \"statusCode\": 200,\n    \"message\": \"Appointment status updated successfully\",\n    \"data\": {\n        \"appointmentId\": \"#AB123C\",\n        \"status\": \"confirmed\",\n        \"notes\": \"Customer confirmed via phone\",\n        \"lastStatusUpdate\": \"2025-02-10T10:30:00.000Z\"\n    }\n}\n\n ```\n\n### 6\\. Reschedule Appointment\n\nReschedule an existing appointment.\n\n**Endpoint:** `PATCH /appointment/:id/reschedule`  \n**Auth Required:** Yes (User role)\n\n**Request Body:**\n\n``` json\n{\n    \"appointmentDate\": \"2025-02-20\",\n    \"startTime\": \"15:00\"\n}\n\n ```\n\n**Successful Response (200 OK):**\n\n``` json\n{\n    \"success\": true,\n    \"statusCode\": 200,\n    \"message\": \"Appointment rescheduled successfully\",\n    \"data\": {\n        \"appointmentId\": \"#AB123C\",\n        \"appointmentDate\": \"2025-02-20T00:00:00.000Z\",\n        \"startTime\": \"15:00\",\n        \"endTime\": \"16:00\",\n        \"rescheduleCount\": 1\n    }\n}\n\n ```\n\n### 7\\. Process Payment\n\nProcess payment for an appointment.\n\n**Endpoint:** `POST /appointment/:id/payment`  \n**Auth Required:** Yes (User role)\n\n**Request Body (Card Payment):**\n\n``` json\n{\n    \"method\": \"visa\",\n    \"cardNumber\": \"4111111111111111\",\n    \"cardHolderName\": \"John Doe\",\n    \"expiryDate\": \"12/25\",\n    \"cvv\": \"123\"\n}\n\n ```\n\n**Request Body (Cash Payment):**\n\n``` json\n{\n    \"method\": \"cash\"\n}\n\n ```\n\n**Successful Response (200 OK):**\n\n``` json\n{\n    \"success\": true,\n    \"statusCode\": 200,\n    \"message\": \"Payment processed successfully\",\n    \"data\": {\n        \"appointmentId\": \"#AB123C\",\n        \"payment\": {\n            \"method\": \"visa\",\n            \"status\": \"paid\",\n            \"transactionId\": \"TXN123456789\",\n            \"cardLastFour\": \"1111\",\n            \"cardHolderName\": \"John Doe\",\n            \"paymentDate\": \"2025-02-10T10:30:00.000Z\",\n            \"amount\": 100,\n            \"currency\": \"USD\"\n        }\n    }\n}\n\n ```\n\n### 8\\. Confirm Cash Payment\n\nConfirm a cash payment for an appointment.\n\n**Endpoint:** `POST /appointment/:id/confirm-cash-payment`  \n**Auth Required:** Yes (Host or User role)\n\n**Successful Response (200 OK):**\n\n``` json\n{\n    \"success\": true,\n    \"statusCode\": 200,\n    \"message\": \"Cash payment confirmed successfully\",\n    \"data\": {\n        \"appointmentId\": \"#AB123C\",\n        \"payment\": {\n            \"method\": \"cash\",\n            \"status\": \"paid\",\n            \"paymentDate\": \"2025-02-10T10:30:00.000Z\",\n            \"amount\": 100,\n            \"currency\": \"USD\"\n        }\n    }\n}\n\n ```\n\n## Error Responses\n\nAll endpoints may return the following error responses:\n\n**401 Unauthorized:**\n\n``` json\n{\n    \"success\": false,\n    \"statusCode\": 401,\n    \"message\": \"You are not authorized to access this resource\"\n}\n\n ```\n\n**400 Bad Request:**\n\n``` json\n{\n    \"success\": false,\n    \"statusCode\": 400,\n    \"message\": \"Validation error message\"\n}\n\n ```\n\n**404 Not Found:**\n\n``` json\n{\n    \"success\": false,\n    \"statusCode\": 404,\n    \"message\": \"Resource not found\"\n}\n\n ```\n\n**500 Internal Server Error:**\n\n``` json\n{\n    \"success\": false,\n    \"statusCode\": 500,\n    \"message\": \"Internal server error\"\n}\n\n ```\n\n## Common Validation Rules\n\n1. **Dates:**\n    \n    - Must be in YYYY-MM-DD format\n        \n    - Cannot be in the past\n        \n    - Must be within salon's operating hours\n        \n2. **Times:**\n    \n    - Must be in HH:MM format (24-hour)\n        \n    - Must be within salon's business hours\n        \n    - Must align with service duration\n        \n3. **Payment Methods:**\n    \n    - Allowed values: \"cash\", \"visa\", \"mastercard\", \"paypal\"\n        \n    - Card payments require additional details\n        \n4. **Appointment Status:**\n    \n    - Allowed values: \"pending\", \"confirmed\", \"cancelled\", \"completed\", \"no-show\"\n        \n    - Some status changes may have restrictions\n        \n5. **Rescheduling:**\n    \n    - Limited to 2 reschedules per appointment\n        \n    - New time must be available\n        \n    - Cannot reschedule past appointments"
				},
				{
					"name": "Add Products",
					"item": [
						{
							"name": "Create Product",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU5ODdiZGQyN2EzMTc5ZWJiYmU0NSIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJob3N0MUBnbWFpbC5jb20iLCJuYW1lIjoiU2Fsb24gMSIsImlhdCI6MTczOTI1NDMxMiwiZXhwIjoxNzM5MzQwNzEyfQ.H1V06AXoJ0CynOobMzDaxh_6oqx4QWRezZMyrXa9Qug",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "salonName",
											"value": "Beauty Oli I",
											"type": "text",
											"disabled": true
										},
										{
											"key": "name",
											"value": "New shampu haowya 22",
											"type": "text"
										},
										{
											"key": "description",
											"value": "Advanced hair treatment serum",
											"type": "text"
										},
										{
											"key": "price",
											"value": "10",
											"type": "text"
										},
										{
											"key": "quantity",
											"value": "20",
											"type": "text"
										},
										{
											"key": "gender",
											"value": "male",
											"type": "text"
										},
										{
											"key": "salon",
											"value": "{{salonId}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "host",
											"value": "{{owner}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "images",
											"type": "file",
											"src": [
												"/C:/Users/nrbna/Desktop/b1.png",
												"/C:/Users/nrbna/Desktop/b2.png",
												"/C:/Users/nrbna/Desktop/b3.png"
											]
										}
									]
								},
								"url": {
									"raw": "{{iphost}}/products/create",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"products",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Product by ID",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJucmJuYXlvbjFAZ21haWwuY29tIiwibmFtZSI6Ik93bmVyIiwiaWF0IjoxNzM4NjU4NDY3LCJleHAiOjE3Mzg3NDQ4Njd9.z6vWaWwB2rECvmsTEbZAx70n2zDaEwLD8b8Xgk8QS40",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "salonName",
											"value": "Beauty Palace",
											"type": "text"
										},
										{
											"key": "name",
											"value": "Hair Serum",
											"type": "text"
										},
										{
											"key": "description",
											"value": "Advanced hair treatment serum",
											"type": "text"
										},
										{
											"key": "price",
											"value": "30",
											"type": "text"
										},
										{
											"key": "quantity",
											"value": "50",
											"type": "text"
										},
										{
											"key": "gender",
											"value": "both",
											"type": "text"
										},
										{
											"key": "salon",
											"value": "{{salonId}}",
											"type": "text"
										},
										{
											"key": "host",
											"value": "{{owner}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "images",
											"type": "file",
											"src": [
												"postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e",
												"/C:/Users/nrbna/Desktop/b3.png",
												"/C:/Users/nrbna/Desktop/b1.png"
											]
										}
									]
								},
								"url": {
									"raw": "{{iphost}}/products/67a1d77468335a04b9138443",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"products",
										"67a1d77468335a04b9138443"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Product by ID",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJucmJuYXlvbjFAZ21haWwuY29tIiwibmFtZSI6Ik93bmVyIiwiaWF0IjoxNzM4NjU4NDY3LCJleHAiOjE3Mzg3NDQ4Njd9.z6vWaWwB2rECvmsTEbZAx70n2zDaEwLD8b8Xgk8QS40",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "salonName",
											"value": "Beauty Palace",
											"type": "text",
											"disabled": true
										},
										{
											"key": "name",
											"value": "Updated Hair Serum",
											"type": "text"
										},
										{
											"key": "description",
											"value": "Advanced hair treatment serum Updated Hair Serum",
											"type": "text"
										},
										{
											"key": "price",
											"value": "40",
											"type": "text"
										},
										{
											"key": "quantity",
											"value": "50",
											"type": "text",
											"disabled": true
										},
										{
											"key": "gender",
											"value": "both",
											"type": "text",
											"disabled": true
										},
										{
											"key": "salon",
											"value": "{{salonId}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "host",
											"value": "{{owner}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "images",
											"type": "file",
											"src": [
												"postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e",
												"/C:/Users/nrbna/Desktop/b1.png"
											]
										}
									]
								},
								"url": {
									"raw": "{{iphost}}/products/67a1d77468335a04b9138443",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"products",
										"67a1d77468335a04b9138443"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Product by ID",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJucmJuYXlvbjFAZ21haWwuY29tIiwibmFtZSI6Ik93bmVyIiwiaWF0IjoxNzM4NjU4NDY3LCJleHAiOjE3Mzg3NDQ4Njd9.z6vWaWwB2rECvmsTEbZAx70n2zDaEwLD8b8Xgk8QS40",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "salonName",
											"value": "Beauty Palace",
											"type": "text",
											"disabled": true
										},
										{
											"key": "name",
											"value": "Updated Hair Serum",
											"type": "text"
										},
										{
											"key": "description",
											"value": "Advanced hair treatment serum Updated Hair Serum",
											"type": "text"
										},
										{
											"key": "price",
											"value": "40",
											"type": "text"
										},
										{
											"key": "quantity",
											"value": "50",
											"type": "text",
											"disabled": true
										},
										{
											"key": "gender",
											"value": "both",
											"type": "text",
											"disabled": true
										},
										{
											"key": "salon",
											"value": "{{salonId}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "host",
											"value": "{{owner}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "images",
											"type": "file",
											"src": [
												"postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e",
												"/C:/Users/nrbna/Desktop/b1.png"
											]
										}
									]
								},
								"url": {
									"raw": "{{iphost}}/products/67a1dd74453a8e5b712023f4",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"products",
										"67a1dd74453a8e5b712023f4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Salon Products",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJucmJuYXlvbjFAZ21haWwuY29tIiwibmFtZSI6Ik93bmVyIiwiaWF0IjoxNzM4NjU4NDY3LCJleHAiOjE3Mzg3NDQ4Njd9.z6vWaWwB2rECvmsTEbZAx70n2zDaEwLD8b8Xgk8QS40",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "salonName",
											"value": "Beauty Palace",
											"type": "text",
											"disabled": true
										},
										{
											"key": "name",
											"value": "Updated Hair Serum",
											"type": "text"
										},
										{
											"key": "description",
											"value": "Advanced hair treatment serum Updated Hair Serum",
											"type": "text"
										},
										{
											"key": "price",
											"value": "40",
											"type": "text"
										},
										{
											"key": "quantity",
											"value": "50",
											"type": "text",
											"disabled": true
										},
										{
											"key": "gender",
											"value": "both",
											"type": "text",
											"disabled": true
										},
										{
											"key": "salon",
											"value": "{{salonId}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "host",
											"value": "{{owner}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "images",
											"type": "file",
											"src": [
												"postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e",
												"/C:/Users/nrbna/Desktop/b1.png"
											]
										}
									]
								},
								"url": {
									"raw": "{{iphost}}/products/salon/{{salonId}}",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"products",
										"salon",
										"{{salonId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Similar Products",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJucmJuYXlvbjFAZ21haWwuY29tIiwibmFtZSI6Ik93bmVyIiwiaWF0IjoxNzM4NjU4NDY3LCJleHAiOjE3Mzg3NDQ4Njd9.z6vWaWwB2rECvmsTEbZAx70n2zDaEwLD8b8Xgk8QS40",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "salonName",
											"value": "Beauty Palace",
											"type": "text",
											"disabled": true
										},
										{
											"key": "name",
											"value": "Updated Hair Serum",
											"type": "text"
										},
										{
											"key": "description",
											"value": "Advanced hair treatment serum Updated Hair Serum",
											"type": "text"
										},
										{
											"key": "price",
											"value": "40",
											"type": "text"
										},
										{
											"key": "quantity",
											"value": "50",
											"type": "text",
											"disabled": true
										},
										{
											"key": "gender",
											"value": "both",
											"type": "text",
											"disabled": true
										},
										{
											"key": "salon",
											"value": "{{salonId}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "host",
											"value": "{{owner}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "images",
											"type": "file",
											"src": [
												"postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e",
												"/C:/Users/nrbna/Desktop/b1.png"
											]
										}
									]
								},
								"url": {
									"raw": "{{iphost}}/products/similar/67a1d77468335a04b9138443",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"products",
										"similar",
										"67a1d77468335a04b9138443"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Products",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJucmJuYXlvbjFAZ21haWwuY29tIiwibmFtZSI6Ik93bmVyIiwiaWF0IjoxNzM4NjU4NDY3LCJleHAiOjE3Mzg3NDQ4Njd9.z6vWaWwB2rECvmsTEbZAx70n2zDaEwLD8b8Xgk8QS40",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "salonName",
											"value": "Beauty Palace",
											"type": "text"
										},
										{
											"key": "name",
											"value": "Hair Serum",
											"type": "text"
										},
										{
											"key": "description",
											"value": "Advanced hair treatment serum",
											"type": "text"
										},
										{
											"key": "price",
											"value": "30",
											"type": "text"
										},
										{
											"key": "quantity",
											"value": "50",
											"type": "text"
										},
										{
											"key": "gender",
											"value": "both",
											"type": "text"
										},
										{
											"key": "salon",
											"value": "{{salonId}}",
											"type": "text"
										},
										{
											"key": "host",
											"value": "{{owner}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "images",
											"type": "file",
											"src": [
												"postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e",
												"/C:/Users/nrbna/Desktop/b3.png",
												"/C:/Users/nrbna/Desktop/b1.png"
											]
										}
									]
								},
								"url": {
									"raw": "{{iphost}}/products/create",
									"host": [
										"{{iphost}}"
									],
									"path": [
										"products",
										"create"
									]
								}
							},
							"response": []
						}
					],
					"description": "# Product API Testing Collection\n\n## Base URL\n\n```\nhttp://localhost:3000/api/v1/products\n\n ```\n\n## Authentication\n\nAll requests require a Bearer token except where noted.  \nAdd to Headers:\n\n```\nAuthorization: Bearer <your_token>\n\n ```\n\n## Endpoints\n\n### 1\\. Create Product\n\n**POST** `/create`\n\n**Role Required:** HOST\n\n**Body** (form-data):\n\n``` json\n{\n  \"salonName\": \"Beauty Palace\",\n  \"name\": \"Hair Serum\",\n  \"description\": \"Advanced hair treatment serum\",\n  \"price\": 29.99,\n  \"quantity\": 50,\n  \"gender\": \"both\",\n  \"salon\": \"{{salon_id}}\",\n  \"host\": \"{{host_id}}\",\n  \"status\": \"active\"\n}\n\n ```\n\n**Files:**\n\n- Key: `images`\n    \n- Type: `File`\n    \n- Multiple files allowed\n    \n\n**Success Response (201):**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 201,\n  \"message\": \"Product created successfully\",\n  \"data\": {\n    \"id\": \"...\",\n    \"salonName\": \"Beauty Palace\",\n    \"name\": \"Hair Serum\",\n    \"images\": [\"url1\", \"url2\"],\n    \"description\": \"Advanced hair treatment serum\",\n    \"price\": 29.99,\n    \"quantity\": 50,\n    \"salon\": {\n      \"name\": \"Beauty Palace\",\n      \"address\": \"...\",\n      \"phone\": \"...\"\n    },\n    \"host\": {\n      \"name\": \"John Doe\",\n      \"email\": \"...\",\n      \"phone\": \"...\"\n    },\n    \"gender\": \"both\",\n    \"status\": \"active\",\n    \"rating\": 0,\n    \"reviewCount\": 0,\n    \"createdAt\": \"2024-02-04T...\",\n    \"updatedAt\": \"2024-02-04T...\"\n  }\n}\n\n ```\n\n### 2\\. Get All Products\n\n**GET** `/all`\n\n**Role Required:** ADMIN, HOST, or USER\n\n**Query Parameters:**\n\n```\n?page=1\n&limit=10\n&sortBy=createdAt\n&sortOrder=desc\n&searchTerm=hair\n&price[min]=10\n&price[max]=100\n&gender=both\n&salon={{salon_id}}\n&minRating=4\n\n ```\n\n**Success Response (200):**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Products retrieved successfully\",\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"total\": 50,\n    \"totalPages\": 5\n  },\n  \"data\": [...]\n}\n\n ```\n\n### 3\\. Get Product by ID\n\n**GET** `/:id`\n\n**Role Required:** ADMIN, HOST, or USER\n\n**Success Response (200):**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Product retrieved successfully\",\n  \"data\": {...}\n}\n\n ```\n\n### 4\\. Update Product\n\n**PATCH** `/:id`\n\n**Role Required:** HOST\n\n**Body** (form-data):\n\n``` json\n{\n  \"name\": \"Updated Hair Serum\",\n  \"price\": 34.99,\n  \"status\": \"active\"\n}\n\n ```\n\n**Files:**\n\n- Key: `images`\n    \n- Type: `File`\n    \n- Multiple files allowed\n    \n\n**Success Response (200):**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Product updated successfully\",\n  \"data\": {...}\n}\n\n ```\n\n### 5\\. Delete Product\n\n**DELETE** `/:id`\n\n**Role Required:** HOST or ADMIN\n\n**Success Response (200):**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Product deleted successfully\",\n  \"data\": {...}\n}\n\n ```\n\n### 6\\. Get Salon Products\n\n**GET** `/salon/:salonId`\n\n**Role Required:** ADMIN, HOST, or USER\n\n**Query Parameters:** Same as Get All Products\n\n**Success Response (200):**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Salon products retrieved successfully\",\n  \"meta\": {...},\n  \"data\": [...]\n}\n\n ```\n\n### 7\\. Get Similar Products\n\n**GET** `/similar/:id`\n\n**Role Required:** ADMIN, HOST, or USER\n\n**Success Response (200):**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Similar products retrieved successfully\",\n  \"data\": [...]\n}\n\n ```\n\n## Environment Variables\n\nCreate these variables in your Postman environment:\n\n```\nbase_url: http://localhost:5000/api/v1\ntoken: <your_auth_token>\nsalon_id: <valid_salon_id>\nhost_id: <valid_host_id>\nproduct_id: <valid_product_id>\n\n ```\n\n## Testing Steps\n\n1. **Prerequisites:**\n    \n    - Create a user account with HOST role\n        \n    - Create a salon\n        \n    - Get authentication token\n        \n    - Set up environment variables\n        \n2. **Test Flow:**\n    \n    1. Create a new product\n        \n    2. Get all products to verify creation\n        \n    3. Get product by ID\n        \n    4. Update product\n        \n    5. Get salon products\n        \n    6. Get similar products\n        \n    7. Delete product\n        \n3. **Error Testing:**\n    \n    - Try creating product without authentication\n        \n    - Try creating product with invalid salon ID\n        \n    - Try updating product as non-host user\n        \n    - Try accessing with invalid token\n        \n    - Test with invalid image formats\n        \n    - Test with missing required fields"
				},
				{
					"name": "1. Initial Salon Registration",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU5ODdiZGQyN2EzMTc5ZWJiYmU0NSIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJob3N0MUBnbWFpbC5jb20iLCJuYW1lIjoiU2Fsb24gMSIsImlhdCI6MTczODkxOTc1OSwiZXhwIjoxNzM5MDA2MTU5fQ.-G-Sddgu4swTbR0mcdhNTEC6apL9qosjr2iUKNOEt90",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "passportNum",
									"value": "EM123456",
									"type": "text"
								},
								{
									"key": "doc",
									"type": "file",
									"src": "/C:/Users/nrbna/Desktop/b2.png"
								}
							]
						},
						"url": {
							"raw": "{{iphost}}/salon/register",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"salon",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Complete Salon Registration",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU5OGNhZGQyN2EzMTc5ZWJiYmU1MyIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJob3N0MkBnbWFpbC5jb20iLCJuYW1lIjoiU2Fsb24gMiIsImlhdCI6MTczODkwNTg1MCwiZXhwIjoxNzM4OTkyMjUwfQ.82VJ_ScfYDkOnzJVNMZHqe4Y9krH7nEB5ufEcAsfn70",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Old Age Salon\",\r\n  \"phone\": \"+1234567852\",\r\n  \"gender\": \"male\",\r\n  \"address\": {\r\n    \"locationName\": \"123 Main Street, Dhaka Area\",\r\n    \"latitude\": 25.8103,\r\n    \"longitude\": 90.4125\r\n  },\r\n  \"category\": \"67a19e5e2fe2129e799ddcbb\"\r\n}"
						},
						"url": {
							"raw": "{{iphost}}/salon/complete/67a5d0c23b6ece72526878d1",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"salon",
								"complete",
								"67a5d0c23b6ece72526878d1"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Get My Salon",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						},
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU5OGNhZGQyN2EzMTc5ZWJiYmU1MyIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJob3N0MkBnbWFpbC5jb20iLCJuYW1lIjoiU2Fsb24gMiIsImlhdCI6MTczODkwNTg1MCwiZXhwIjoxNzM4OTkyMjUwfQ.82VJ_ScfYDkOnzJVNMZHqe4Y9krH7nEB5ufEcAsfn70",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Old Age Salon\",\r\n  \"phone\": \"+1234567852\",\r\n  \"gender\": \"male\",\r\n  \"address\": {\r\n    \"locationName\": \"123 Main Street, Dhaka Area\",\r\n    \"latitude\": 25.8103,\r\n    \"longitude\": 90.4125\r\n  },\r\n  \"category\": \"67a19e5e2fe2129e799ddcbb\"\r\n}"
						},
						"url": {
							"raw": "{{iphost}}/salon/my-salon",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"salon",
								"my-salon"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Salon",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6IkhpIEJveXMiLCJpYXQiOjE3MzgyMTQwNTYsImV4cCI6MTczODMwMDQ1Nn0.O8-v5eS0xyI6durkcdgf0B3BdUGrp2wP18aOPsd5n0s",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": "postman-cloud:///1efddfc9-5154-4170-bc33-8a22b048549e"
								},
								{
									"key": "name",
									"value": "new 2",
									"type": "text"
								},
								{
									"key": "passportNum",
									"value": "1555555155444",
									"type": "text"
								},
								{
									"key": "address",
									"value": "daka",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "11585528888",
									"type": "text"
								},
								{
									"key": "gender",
									"value": "both",
									"type": "text"
								},
								{
									"key": "businessHours",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "category",
									"value": "679b10c2a2f43083c62c15d5",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{iphost}}/salon/all",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"salon",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Salon Based on Gender",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWRiNDQ2ZTZjMjkyODYxYjZlYmM3YyIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJzaGFraWIuc3Bhcmt0ZWNoMUBnbWFpbC5jb20iLCJuYW1lIjoiU2hha2liIiwiaWF0IjoxNzM4Mzg4NjcyLCJleHAiOjE3Mzg0NzUwNzJ9.10MdJu4krJOQs3_fKd22DnLTLaWF9U43mQ-FIQxpXdY",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{iphost}}/salon/user/gender",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"salon",
								"user",
								"gender"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Salon By searchTearm with category name also",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6IkhpIEJveXMiLCJpYXQiOjE3MzgzMTg1MTMsImV4cCI6MTczODQwNDkxM30.64NukMCvL3j0TbJOM3EZJkJraImBBZmuuk6bwzDeW6w",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{iphost}}/salon?searchTerm=new 25555",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"salon"
							],
							"query": [
								{
									"key": "searchTerm",
									"value": "new 25555"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get  Salon By status",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6IkhpIEJveXMiLCJpYXQiOjE3MzgzMTg1MTMsImV4cCI6MTczODQwNDkxM30.64NukMCvL3j0TbJOM3EZJkJraImBBZmuuk6bwzDeW6w",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{iphost}}/salon/status/rejected",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"salon",
								"status",
								"rejected"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Pending  Salon",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6IkhpIEJveXMiLCJpYXQiOjE3MzgzMTg1MTMsImV4cCI6MTczODQwNDkxM30.64NukMCvL3j0TbJOM3EZJkJraImBBZmuuk6bwzDeW6w",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{iphost}}/salon/admin/pending",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"salon",
								"admin",
								"pending"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Salon by ID",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU5OGNhZGQyN2EzMTc5ZWJiYmU1MyIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJob3N0MkBnbWFpbC5jb20iLCJuYW1lIjoiU2Fsb24gMiIsImlhdCI6MTczODkwNTg1MCwiZXhwIjoxNzM4OTkyMjUwfQ.82VJ_ScfYDkOnzJVNMZHqe4Y9krH7nEB5ufEcAsfn70",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Modern Cuts Salon\",\r\n  \"phone\": \"+1234567890\",\r\n  \"gender\": \"male\",\r\n  \"address\": {\r\n    \"locationName\": \"123 Main Street, Downtown Area\",\r\n    \"latitude\": 23.8103,\r\n    \"longitude\": 90.4125\r\n  },\r\n  \"businessHours\": [\r\n    {\r\n      \"day\": \"Monday\",\r\n      \"startTime\": \"09:00\",\r\n      \"endTime\": \"18:00\",\r\n      \"isOff\": false\r\n    },\r\n    {\r\n      \"day\": \"Tuesday\",\r\n      \"startTime\": \"09:00\",\r\n      \"endTime\": \"18:00\",\r\n      \"isOff\": false\r\n    },\r\n    {\r\n      \"day\": \"Wednesday\",\r\n      \"startTime\": \"09:00\",\r\n      \"endTime\": \"18:00\",\r\n      \"isOff\": false\r\n    },\r\n    {\r\n      \"day\": \"Thursday\",\r\n      \"startTime\": \"09:00\",\r\n      \"endTime\": \"18:00\",\r\n      \"isOff\": false\r\n    },\r\n    {\r\n      \"day\": \"Friday\",\r\n      \"startTime\": \"09:00\",\r\n      \"endTime\": \"18:00\",\r\n      \"isOff\": false\r\n    },\r\n    {\r\n      \"day\": \"Saturday\",\r\n      \"startTime\": \"10:00\",\r\n      \"endTime\": \"16:00\",\r\n      \"isOff\": false\r\n    },\r\n    {\r\n      \"day\": \"Sunday\",\r\n      \"startTime\": \"00:00\",\r\n      \"endTime\": \"00:00\",\r\n      \"isOff\": true\r\n    }\r\n  ],\r\n  \"category\": \"67a19e5e2fe2129e799ddcbb\",\r\n  \"remarks\": \"Initial submission\"\r\n}"
						},
						"url": {
							"raw": "{{iphost}}/salon/update/67a5ac65e186b9e0762d0d71",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"salon",
								"update",
								"67a5ac65e186b9e0762d0d71"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Accept salon",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4MGQ0MmRkMTI0MDE4NmUyZDhlNCIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM4OTEyNDU0LCJleHAiOjE3Mzg5OTg4NTR9.jvr3kMq1ZOnzb3pOOAlvv6RfgivZKUo4T1z677PXTsU",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"active\"\r\n}"
						},
						"url": {
							"raw": "{{iphost}}/salon/admin/status/67a5d0c23b6ece72526878d1",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"salon",
								"admin",
								"status",
								"67a5d0c23b6ece72526878d1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get salon BY ID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6IkhpIEJveXMiLCJpYXQiOjE3MzgyMTQwNTYsImV4cCI6MTczODMwMDQ1Nn0.O8-v5eS0xyI6durkcdgf0B3BdUGrp2wP18aOPsd5n0s",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": "/C:/Users/nrbna/Desktop/b1.png"
								},
								{
									"key": "name",
									"value": "New Hair Cut ",
									"type": "text"
								},
								{
									"key": "passportNum",
									"value": "100000011",
									"type": "text"
								},
								{
									"key": "address",
									"value": "Bangladesh",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "11585528888",
									"type": "text",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "male",
									"type": "text"
								},
								{
									"key": "businessHours",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "category",
									"value": "679b10c2a2f43083c62c15d5",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/salon/679b10c2a2f43083c62c15d5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"salon",
								"679b10c2a2f43083c62c15d5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get salon /category /:categoryId",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6IkhpIEJveXMiLCJpYXQiOjE3MzgyMTQwNTYsImV4cCI6MTczODMwMDQ1Nn0.O8-v5eS0xyI6durkcdgf0B3BdUGrp2wP18aOPsd5n0s",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": "/C:/Users/nrbna/Desktop/b1.png"
								},
								{
									"key": "name",
									"value": "New Hair Cut ",
									"type": "text"
								},
								{
									"key": "passportNum",
									"value": "100000011",
									"type": "text"
								},
								{
									"key": "address",
									"value": "Bangladesh",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "11585528888",
									"type": "text",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "male",
									"type": "text"
								},
								{
									"key": "businessHours",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "category",
									"value": "679b10c2a2f43083c62c15d5",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/salon//category/679b101a408fb79d23088cdb",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"salon",
								"",
								"category",
								"679b101a408fb79d23088cdb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete by ID",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTg4ZGQyY2JmY2YxZTM0NGEzYTIxYyIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6IkhpIEJveXMiLCJpYXQiOjE3MzgyMTQwNTYsImV4cCI6MTczODMwMDQ1Nn0.O8-v5eS0xyI6durkcdgf0B3BdUGrp2wP18aOPsd5n0s",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": "/C:/Users/nrbna/Desktop/b1.png"
								},
								{
									"key": "name",
									"value": "New Hair Cut ",
									"type": "text"
								},
								{
									"key": "passportNum",
									"value": "100000011",
									"type": "text"
								},
								{
									"key": "address",
									"value": "Bangladesh",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "11585528888",
									"type": "text",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "male",
									"type": "text"
								},
								{
									"key": "businessHours",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "category",
									"value": "679b10c2a2f43083c62c15d5",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://localhost:4000/api/v1/salon/679b1c451dea092e732ae45b",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"v1",
								"salon",
								"679b1c451dea092e732ae45b"
							]
						}
					},
					"response": []
				}
			],
			"description": "# Salon API Documentation\n\n## Base URL\n\n```\nhttp://localhost:3000/api/v1/salon\n\n ```\n\n## Authentication\n\nMost endpoints require authentication via JWT token in the Authorization header:\n\n```\nAuthorization: Bearer <jwt_token>\n\n ```\n\n## Endpoints\n\n### 1\\. Initial Salon Registration\n\nRegister a new salon with required passport and document.\n\n**Endpoint:** `POST /register`  \n**Auth Required:** Yes (HOST role)  \n**Content-Type:** multipart/form-data\n\n**Request Body:**\n\n``` json\n{\n  \"passportNum\": \"AB123456\", // required\n  \"doc\": [File] // required (supports image, PDF, or DOC format)\n}\n\n ```\n\n**Response (200 OK):**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Salon registered successfully. Please complete the registration with additional details.\",\n  \"data\": {\n    \"_id\": \"65b123c456d789e012f345g6\",\n    \"passportNum\": \"AB123456\",\n    \"salonDocument\": \"/docs/document-123456.pdf\",\n    \"status\": \"pending\",\n    \"remarks\": \"Initial registration\"\n  }\n}\n\n ```\n\n### 2\\. Complete Salon Registration\n\nComplete the salon registration with additional details.\n\n**Endpoint:** `POST /complete/:id`  \n**Auth Required:** Yes (HOST role)  \n**Content-Type:** multipart/form-data\n\n**Request Body:**\n\n``` json\n{\n  \"name\": \"Modern Cuts Salon\", // required\n  \"image\": [File], // required (salon profile/banner image)\n  \"phone\": \"+1234567890\",\n  \"gender\": \"both\",\n  \"address\": {\n    \"locationName\": \"123 Main Street\",\n    \"latitude\": 23.8103,\n    \"longitude\": 90.4125\n  },\n  \"businessHours\": [ // optional, defaults provided if not specified\n    {\n      \"day\": \"Monday\",\n      \"startTime\": \"09:00\",\n      \"endTime\": \"18:00\",\n      \"isOff\": false\n    }\n  ],\n  \"category\": \"65a123b456c789d012e345f6\"\n}\n\n ```\n\n**Response (200 OK):**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Salon registration completed successfully! Please wait for admin approval.\",\n  \"data\": {\n    \"_id\": \"65b123c456d789e012f345g6\",\n    \"name\": \"Modern Cuts Salon\",\n    \"passportNum\": \"AB123456\",\n    \"salonDocument\": \"/docs/document-123456.pdf\",\n    \"image\": \"/images/salon-123456.jpg\",\n    \"status\": \"pending\",\n    \"businessHours\": [\n      {\n        \"day\": \"Monday\",\n        \"startTime\": \"09:00\",\n        \"endTime\": \"17:00\",\n        \"isOff\": false\n      }\n      // ... other days\n    ]\n  }\n}\n\n ```\n\n###   \n3\\. Get my Salon: {{iphost}}/salon/my-salon  \n  \n3\\. Update Salon\n\nUpdate an existing salon's information.\n\n**Endpoint:** `PATCH /update/:id`  \n**Auth Required:** Yes (HOST role)  \n**Content-Type:** multipart/form-data\n\n**Request Body:**\n\n``` json\n{\n  \"name\": \"Updated Salon Name\",\n  \"phone\": \"+1987654321\",\n  \"gender\": \"male\",\n  \"address\": {\n    \"locationName\": \"456 New Street\",\n    \"latitude\": 23.8104,\n    \"longitude\": 90.4126\n  },\n  \"image\": [File]\n}\n\n ```\n\n**Response (200 OK):**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Salon updated successfully\",\n  \"data\": {\n    \"_id\": \"65b123c456d789e012f345g6\",\n    \"name\": \"Updated Salon Name\",\n    // ... updated fields\n  }\n}\n\n ```\n\n### 4\\. Get All Salons\n\nRetrieve all salons with pagination and filtering.\n\n**Endpoint:** `GET /all`  \n**Auth Required:** Yes (ADMIN or USER role)\n\n**Query Parameters:**\n\n- `searchTerm` (optional): Search by name, location, or phone\n    \n- `page` (optional, default: 1)\n    \n- `limit` (optional, default: 10)\n    \n- `sortBy` (optional, default: 'createdAt')\n    \n- `order` (optional, default: 'desc')\n    \n\n**Response (200 OK):**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Salons retrieved successfully\",\n  \"data\": {\n    \"meta\": {\n      \"total\": 50,\n      \"limit\": 10,\n      \"totalPages\": 5,\n      \"currentPage\": 1\n    },\n    \"data\": [\n      {\n        \"_id\": \"65b123c456d789e012f345g6\",\n        \"name\": \"Modern Cuts Salon\",\n        // ... salon fields\n      }\n    ]\n  }\n}\n\n ```\n\n### 5\\. Get Salon by ID\n\nRetrieve a specific salon's details.\n\n**Endpoint:** `GET /:id`  \n**Auth Required:** Yes (ADMIN, USER, or HOST role)\n\n**Response (200 OK):**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Salon retrieved successfully\",\n  \"data\": {\n    \"_id\": \"65b123c456d789e012f345g6\",\n    \"name\": \"Modern Cuts Salon\",\n    // ... salon fields with populated host and category\n  }\n}\n\n ```\n\n### 6\\. Get Salons by Category\n\nRetrieve all salons in a specific category.\n\n**Endpoint:** `GET /category/:categoryId`  \n**Auth Required:** Yes (ADMIN, USER, or HOST role)\n\n**Response (200 OK):**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Salons retrieved successfully\",\n  \"data\": [\n    {\n      \"_id\": \"65b123c456d789e012f345g6\",\n      \"name\": \"Modern Cuts Salon\",\n      \"category\": {\n        \"_id\": \"65a123b456c789d012e345f6\",\n        \"name\": \"Hair Salon\"\n      }\n      // ... other salon fields\n    }\n  ]\n}\n\n ```\n\n### 7\\. Update Salon Status\n\nUpdate a salon's status (ADMIN only).\n\n**Endpoint:** `PATCH /admin/status/:id`  \n**Auth Required:** Yes (ADMIN role)\n\n**Request Body:**\n\n``` json\n{\n  \"status\": \"active\",\n  \"remarks\": \"Approved after document verification\"\n}\n\n ```\n\n**Response (200 OK):**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Salon active successfully\",\n  \"data\": {\n    \"_id\": \"65b123c456d789e012f345g6\",\n    \"status\": \"active\",\n    \"remarks\": \"Approved after document verification\",\n    // ... other salon fields\n  }\n}\n\n ```\n\n### 8\\. Get Pending Salons\n\nRetrieve all salons with pending status.\n\n**Endpoint:** `GET /admin/pending`  \n**Auth Required:** Yes (ADMIN role)\n\n**Query Parameters:**\n\n- `page` (optional, default: 1)\n    \n- `limit` (optional, default: 10)\n    \n- `sortBy` (optional, default: 'createdAt')\n    \n- `order` (optional, default: 'desc')\n    \n\n**Response (200 OK):**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Pending salons retrieved successfully\",\n  \"data\": {\n    \"meta\": {\n      \"total\": 15,\n      \"limit\": 10,\n      \"totalPages\": 2,\n      \"currentPage\": 1\n    },\n    \"data\": [\n      {\n        \"_id\": \"65b123c456d789e012f345g6\",\n        \"status\": \"pending\"\n        // ... salon fields\n      }\n    ]\n  }\n}\n\n ```\n\n## File Upload Specifications\n\n### Document Upload\n\n- Supported formats: PDF, DOC, JPEG, PNG, JPG\n    \n- Maximum file size: 10MB\n    \n- Field name: `doc`\n    \n\n### Image Upload\n\n- Supported formats: JPEG, PNG, JPG\n    \n- Maximum file size: 10MB\n    \n- Field name: `image`\n    \n\n## Default Business Hours\n\nIf business hours are not provided during registration, the following defaults are set:\n\n``` json\n[\n  { \"day\": \"Monday\", \"startTime\": \"09:00\", \"endTime\": \"17:00\", \"isOff\": false },\n  { \"day\": \"Tuesday\", \"startTime\": \"09:00\", \"endTime\": \"17:00\", \"isOff\": false },\n  { \"day\": \"Wednesday\", \"startTime\": \"09:00\", \"endTime\": \"17:00\", \"isOff\": false },\n  { \"day\": \"Thursday\", \"startTime\": \"09:00\", \"endTime\": \"17:00\", \"isOff\": false },\n  { \"day\": \"Friday\", \"startTime\": \"09:00\", \"endTime\": \"17:00\", \"isOff\": false },\n  { \"day\": \"Saturday\", \"startTime\": \"09:00\", \"endTime\": \"17:00\", \"isOff\": false },\n  { \"day\": \"Sunday\", \"startTime\": \"09:00\", \"endTime\": \"17:00\", \"isOff\": true }\n]\n\n ```\n\n## Notification System\n\n### Socket.IO Events\n\nNotifications are sent through Socket.IO for the following events:\n\n1. {\"message\": \"New salon registration initiated\",\"type\": \"ADMIN\",\"metadata\": { \"hostId\": \"65b123c456d789e012f345g6\", \"salonPassportNum\": \"AB123456\", \"salonDocument\": \"/docs/document-123456.pdf\", \"action\": \"new_salon_registration\"}}\n    \n2. {\"message\": \"New salon registration completed\",\"type\": \"ADMIN\",\"metadata\": { \"hostId\": \"65b123c456d789e012f345g6\", \"hostName\": \"John Doe\", \"salonId\": \"65b123c456d789e012f345g6\", \"action\": \"new_salon_registration_completed\"}}\n    \n\n## Error Responses\n\n### 400 Bad Request\n\n``` json\n{\n  \"success\": false,\n  \"message\": \"Failed to register salon\",\n  \"errorMessages\": [\n    {\n      \"path\": \"passportNum\",\n      \"message\": \"Passport number is required\"\n    }\n  ]\n}\n\n ```\n\n### 401 Unauthorized\n\n``` json\n{\n  \"success\": false,\n  \"message\": \"You are not authorized to access this resource\",\n  \"errorMessages\": []\n}\n\n ```\n\n### 404 Not Found\n\n``` json\n{\n  \"success\": false,\n  \"message\": \"Salon not found\",\n  \"errorMessages\": []\n}\n\n ```\n\n## Testing Checklist\n\n### Initial Registration\n\n- Test with valid passport number and document\n    \n- Test with missing required fields\n    \n- Test with invalid document format\n    \n- Test with duplicate passport number\n    \n- Verify admin notification is sent\n    \n\n### Complete Registration\n\n- Test with valid data including image upload\n    \n- Test with missing required fields\n    \n- Test with invalid salon ID\n    \n- Verify default business hours are set\n    \n- Check admin notification\n    \n\n### Status Updates\n\n- Test all status transitions\n    \n- Verify notification delivery\n    \n- Test invalid status values\n    \n- Test remarks field\n    \n\n### File Uploads\n\n- Test document upload with all supported formats\n    \n- Test image upload with supported formats\n    \n- Test file size limits\n    \n- Test invalid file formats\n    \n\n### Queries\n\n- Test pagination\n    \n- Test sorting\n    \n- Test search functionality\n    \n- Test category filtering\n    \n\n### Socket.IO\n\n- Test notification delivery for all events\n    \n- Test connection handling\n    \n- Test error scenarios"
		},
		{
			"name": "Add Bank Card",
			"item": [
				{
					"name": "Add card",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4MTY2MmRkMTI0MDE4NmUyZDhmMiIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJsb2NhbHVzZXIxQGdtYWlsLmNvbSIsIm5hbWUiOiJMb2NhbCBVc2VyIDEiLCJpYXQiOjE3Mzg5OTcyOTcsImV4cCI6MTczOTA4MzY5N30.9hrBJOUHNWLjtfk0kSuK86pwMO4HAtlBExuCvbAYig0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"cardHolderName\": \"Local User 1\",\r\n  \"cardNumber\": \"4242424242424242\",\r\n  \"cardType\": \"visa\",\r\n  \"expiryDate\": \"12/26\",\r\n  \"cvv\": \"123\",\r\n  \"email\": \"localuser1@gmail.com\",\r\n  \"phone\": \"+1234567890\",\r\n  \"isDefault\": true\r\n}   ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/cards/add",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"cards",
								"add"
							]
						}
					},
					"response": []
				}
			],
			"description": "# Card Payment API Documentation\n\n## Base URL\n\n```\n{{baseUrl}}/api/v1/cards\n\n ```\n\n## Environment Variables Setup\n\nCreate these variables in your Postman environment:\n\n- `baseUrl`: Your API base URL (e.g., [http://localhost:5000](http://localhost:5000))\n    \n- `authToken`: JWT token for authentication\n    \n\n## Authentication\n\nAll endpoints require authentication. Add this to your request headers:\n\n```\nAuthorization: Bearer {{authToken}}\n\n ```\n\n## API Endpoints\n\n### 1\\. Add New Card\n\n**Endpoint:** POST `/add`\n\n**Request Body:**\n\n``` json\n{\n    \"cardHolderName\": \"John Doe\",\n    \"cardNumber\": \"4532015112830366\",\n    \"cardType\": \"visa\",\n    \"expiryDate\": \"12/25\",\n    \"cvv\": \"123\",\n    \"email\": \"john.doe@example.com\",\n    \"phone\": \"+1234567890\",\n    \"isDefault\": true\n}\n\n ```\n\n**Test Cases:**\n\n1. pm.test(\"Should successfully add a new card\", function () { pm.response.to.have.status(201); pm.expect(pm.response.json().success).to.be.true; pm.expect(pm.response.json().message).to.equal(\"Card added successfully\"); pm.expect(pm.response.json().data).to.have.property(\"lastFourDigits\");});\n    \n2. { \"cardHolderName\": \"John Doe\", \"cardNumber\": \"4532015112830367\", // Invalid checksum \"cardType\": \"visa\", \"expiryDate\": \"12/25\", \"cvv\": \"123\", \"email\": \"john.doe@example.com\", \"phone\": \"+1234567890\"}\n    \n3. { \"cardHolderName\": \"John Doe\", \"cardNumber\": \"4532015112830366\", \"cardType\": \"visa\", \"expiryDate\": \"12/22\", // Expired date \"cvv\": \"123\", \"email\": \"john.doe@example.com\", \"phone\": \"+1234567890\"}\n    \n\n### 2\\. Get All Cards\n\n**Endpoint:** GET `/`\n\n**Test Cases:**\n\n1. pm.test(\"Should retrieve all cards\", function () { pm.response.to.have.status(200); pm.expect(pm.response.json().success).to.be.true; pm.expect(pm.response.json().data).to.be.an('array');});\n    \n2. pm.test(\"Card data should have required properties\", function () { const card = pm.response.json().data\\[0\\]; pm.expect(card).to.have.property('cardHolderName'); pm.expect(card).to.have.property('lastFourDigits'); pm.expect(card).to.not.have.property('cardNumber'); pm.expect(card).to.not.have.property('cvv');});\n    \n\n### 3\\. Get Card by ID\n\n**Endpoint:** GET `/:cardId`\n\n**Test Cases:**\n\n1. pm.test(\"Should retrieve specific card\", function () { pm.response.to.have.status(200); pm.expect(pm.response.json().data._id).to.equal(pm.variables.get(\"cardId\"));});\n    \n2. // Use non-existent card IDpm.test(\"Should return 404 for non-existent card\", function () { pm.response.to.have.status(404); pm.expect(pm.response.json().message).to.equal(\"Card not found\");});\n    \n\n### 4\\. Update Card\n\n**Endpoint:** PATCH `/:cardId`\n\n**Request Body:**\n\n``` json\n{\n    \"cardHolderName\": \"John Smith\",\n    \"expiryDate\": \"12/26\",\n    \"email\": \"john.smith@example.com\",\n    \"phone\": \"+1987654321\"\n}\n\n ```\n\n**Test Cases:**\n\n1. pm.test(\"Should update card successfully\", function () { pm.response.to.have.status(200); pm.expect(pm.response.json().data.cardHolderName).to.equal(\"John Smith\");});\n    \n2. { \"expiryDate\": \"13/26\" // Invalid month}\n    \n\n### 5\\. Delete Card\n\n**Endpoint:** DELETE `/:cardId`\n\n**Test Cases:**\n\n1. pm.test(\"Should delete card successfully\", function () { pm.response.to.have.status(200); pm.expect(pm.response.json().message).to.equal(\"Card deleted successfully\");});\n    \n2. // Follow-up GET request to verify card is deletedpm.test(\"Card should not exist after deletion\", function () { pm.response.to.have.status(404);});\n    \n\n### 6\\. Set Default Card\n\n**Endpoint:** PATCH `/:cardId/set-default`\n\n**Test Cases:**\n\n1. pm.test(\"Should set card as default\", function () { pm.response.to.have.status(200); pm.expect(pm.response.json().data.isDefault).to.be.true;});\n    \n2. // In the GET all cards requestpm.test(\"Only one card should be default\", function () { const cards = pm.response.json().data; const defaultCards = cards.filter(card => card.isDefault); pm.expect(defaultCards.length).to.equal(1);});\n    \n\n## Test Data Sets\n\n### Valid Test Cards\n\n1. { \"cardNumber\": \"4532015112830366\", \"cardType\": \"visa\"}\n    \n2. { \"cardNumber\": \"5425233430109903\", \"cardType\": \"mastercard\"}\n    \n\n### Invalid Test Cards\n\n1. { \"cardNumber\": \"4532015112830366\", \"cardType\": \"mastercard\" // Visa number with Mastercard type}\n    \n2. { \"cardNumber\": \"4532015112830367\"}\n    \n\n## Postman Collection Setup\n\n1. Create a new collection named \"Card Payment API\"\n    \n2. Set up environment variables\n    \n3. if (!pm.environment.get('authToken')) { console.error('Authentication token not found in environment');}\n    \n4. pm.test(\"Response time is acceptable\", function () { pm.expect(pm.response.responseTime).to.be.below(1000);});\n    \n5. pm.test(\"Response should be JSON\", function () { pm.response.to.be.json;});\n    \n\npm.test(\"Response structure is correct\", function () {  \npm.expect(pm.response.json()).to.have.property('success');  \npm.expect(pm.response.json()).to.have.property('message');  \nif (pm.response.json().success) {  \npm.expect(pm.response.json()).to.have.property('data');  \n}  \n});  \n\\`\\`\\`"
		},
		{
			"name": "Chatting",
			"item": [
				{
					"name": "Create One-on-One Chat Chat P1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWI2MGM0ODk1NWYxMWFlZTRmMTQzOSIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJucmJuYXlvbmlpM0BnbWFpbC5jb20iLCJuYW1lIjoiSG9zdCBQMSIsImlhdCI6MTczODU4Mzk1MSwiZXhwIjoxNzM4NjcwMzUxfQ.MtDOUZ8HfdDeOyNUUydEpPGASDYNtPaJY1dPFtipo-w",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"{{User2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/chat",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"chat"
							]
						}
					},
					"response": []
				},
				{
					"name": "Message start From User 1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWI2MGM0ODk1NWYxMWFlZTRmMTQzOSIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJucmJuYXlvbmlpM0BnbWFpbC5jb20iLCJuYW1lIjoiSG9zdCBQMSIsImlhdCI6MTczODU4Mzk1MSwiZXhwIjoxNzM4NjcwMzUxfQ.MtDOUZ8HfdDeOyNUUydEpPGASDYNtPaJY1dPFtipo-w",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"Hello User Two new test!\",\r\n    \"chatId\": \"{{chatID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/message",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"message"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mark messages as read u1:",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWI2MGM0ODk1NWYxMWFlZTRmMTQzOSIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJucmJuYXlvbmlpM0BnbWFpbC5jb20iLCJuYW1lIjoiSG9zdCBQMSIsImlhdCI6MTczODU4Mzk1MSwiZXhwIjoxNzM4NjcwMzUxfQ.MtDOUZ8HfdDeOyNUUydEpPGASDYNtPaJY1dPFtipo-w",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"Hello User Two!\",\r\n    \"chatId\": \"{{chatID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/message/{{messageID}}/read",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"message",
								"{{messageID}}",
								"read"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get chat messages (as either user):",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWI2MGM0ODk1NWYxMWFlZTRmMTQzOSIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJucmJuYXlvbmlpM0BnbWFpbC5jb20iLCJuYW1lIjoiSG9zdCBQMSIsImlhdCI6MTczODU4Mzk1MSwiZXhwIjoxNzM4NjcwMzUxfQ.MtDOUZ8HfdDeOyNUUydEpPGASDYNtPaJY1dPFtipo-w",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"Hello User Two!\",\r\n    \"chatId\": \"{{chatID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/message/{{chatID}}",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"message",
								"{{chatID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User 2 get message",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWI2Y2M3MzE3MmI1ZDVjMjUzYzU0MiIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJucmJuYXlvbmlpNUBnbWFpbC5jb20iLCJuYW1lIjoiVXNlciBQMiAiLCJpYXQiOjE3Mzg1ODM5OTIsImV4cCI6MTczODY3MDM5Mn0.riIowuEUoVGn-b42FXFC2HtZifoAsWc71162chUFEfY",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/chat",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"chat"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mark messages as read:",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWI2Y2M3MzE3MmI1ZDVjMjUzYzU0MiIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJucmJuYXlvbmlpNUBnbWFpbC5jb20iLCJuYW1lIjoiVXNlciBQMiAiLCJpYXQiOjE3Mzg1ODM5OTIsImV4cCI6MTczODY3MDM5Mn0.riIowuEUoVGn-b42FXFC2HtZifoAsWc71162chUFEfY",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/message/{{messageID}}/read",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"message",
								"{{messageID}}",
								"read"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Message As User 2:",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWI2Y2M3MzE3MmI1ZDVjMjUzYzU0MiIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJucmJuYXlvbmlpNUBnbWFpbC5jb20iLCJuYW1lIjoiVXNlciBQMiAiLCJpYXQiOjE3Mzg1ODM5OTIsImV4cCI6MTczODY3MDM5Mn0.riIowuEUoVGn-b42FXFC2HtZifoAsWc71162chUFEfY",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"Hi Host, I'm good! How about you?\",\r\n    \"chatId\": \"{{chatID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/message",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"message"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Review",
			"item": [
				{
					"name": "Create Review",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU5MDQ1ZTM2MjZhOTZhYzNmY2U2ZSIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJsb2NhbHVzZXIzQGdtYWlsLmNvbSIsIm5hbWUiOiJMb2NhbCBVc2VyIDMiLCJpYXQiOjE3Mzg5OTI2NjMsImV4cCI6MTczOTA3OTA2M30.oa_r72od1oXxD7tY2c_yn1UpGp5sPxBKjDL_foL6hsE",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rating\": 5,\r\n  \"review\": \"Great product, highly recommended!\",\r\n  \"product\": \"67a5dba17b2d7f45bc25e9d6\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/reviews/create",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"reviews",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Review 2nd",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM5ZDNkYjg0ODFkOTNiODVmMjU5NyIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJucmJuYXlvbmlpNTU1NUBnbWFpbC5jb20iLCJuYW1lIjoiTmF5b24zMzMiLCJpYXQiOjE3Mzg3MjYyMTksImV4cCI6MTczODgxMjYxOX0.pW80UJXtwTBC0QVYgjKUja47WsdECy378GW8WAVW1kA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rating\": 4,\r\n  \"review\": \"Great product, highly recommended!\",\r\n  \"service\": \"67a1d77468335a04b9138443\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/reviews/create",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"reviews",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Reviews by P/SID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4MTY2MmRkMTI0MDE4NmUyZDhmMiIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJsb2NhbHVzZXIxQGdtYWlsLmNvbSIsIm5hbWUiOiJMb2NhbCBVc2VyIDEiLCJpYXQiOjE3Mzg5MjUzNzcsImV4cCI6MTczOTAxMTc3N30.PlpoWX1HB--MGmyTngey928iK84jeFhktcGvqwgeKDA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/reviews?product=67a5dba17b2d7f45bc25e9d6",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"reviews"
							],
							"query": [
								{
									"key": "product",
									"value": "67a5dba17b2d7f45bc25e9d6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Review",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM5ZDNkYjg0ODFkOTNiODVmMjU5NyIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJucmJuYXlvbmlpNTU1NUBnbWFpbC5jb20iLCJuYW1lIjoiTmF5b24zMzMiLCJpYXQiOjE3Mzg3MjYyMTksImV4cCI6MTczODgxMjYxOX0.pW80UJXtwTBC0QVYgjKUja47WsdECy378GW8WAVW1kA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rating\": 5,\r\n  \"review\": \"Updated review text\",\r\n  \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/reviews/67a2db6069d6988d92436f59",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"reviews",
								"67a2db6069d6988d92436f59"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Review",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM5ZDNkYjg0ODFkOTNiODVmMjU5NyIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJucmJuYXlvbmlpNTU1NUBnbWFpbC5jb20iLCJuYW1lIjoiTmF5b24zMzMiLCJpYXQiOjE3Mzg3MjYyMTksImV4cCI6MTczODgxMjYxOX0.pW80UJXtwTBC0QVYgjKUja47WsdECy378GW8WAVW1kA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rating\": 5,\r\n  \"review\": \"Updated review text\",\r\n  \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/reviews/67a2db6069d6988d92436f59",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"reviews",
								"67a2db6069d6988d92436f59"
							]
						}
					},
					"response": []
				}
			],
			"description": "# Review API Documentation\n\nBase URL: `http://localhost:5000/api/v1`\n\n## Authentication\n\nAll endpoints require JWT authentication. Add the token to the request header:\n\n```\nAuthorization: Bearer {your-jwt-token}\n\n ```\n\n## 1\\. Create Review\n\nCreate a new review for a product or service.\n\n**Endpoint:** `POST /reviews/create`\n\n**Authorization:** Required (User role)\n\n### Request Body:\n\n``` json\n{\n    \"rating\": 4.5,\n    \"review\": \"Great product, highly recommended!\",\n    \"product\": \"65a123b456c789d012345678\"  // Either product or service ID\n    // OR\n    // \"service\": \"65a123b456c789d012345678\"\n}\n\n ```\n\n### Validation Rules:\n\n- Rating must be between 1 and 5\n    \n- Review text is required\n    \n- Must provide either product or service ID, not both\n    \n- Cannot review the same product/service twice\n    \n\n### Success Response (201 Created):\n\n``` json\n{\n    \"success\": true,\n    \"statusCode\": 201,\n    \"message\": \"Review created successfully\",\n    \"data\": {\n        \"_id\": \"65a123b456c789d012345678\",\n        \"rating\": 4.5,\n        \"review\": \"Great product, highly recommended!\",\n        \"user\": \"65a123b456c789d012345678\",\n        \"product\": \"65a123b456c789d012345678\",\n        \"status\": \"active\",\n        \"createdAt\": \"2024-02-08T10:00:00.000Z\",\n        \"updatedAt\": \"2024-02-08T10:00:00.000Z\"\n    }\n}\n\n ```\n\n### Error Responses:\n\n``` json\n{\n    \"success\": false,\n    \"statusCode\": 400,\n    \"message\": \"You have already reviewed this item\"\n}\n\n ```\n\n## 2\\. Get Reviews\n\nRetrieve reviews with filtering, sorting, and pagination.\n\n**Endpoint:** `GET /reviews`\n\n**Authorization:** Required (Admin, User, or Host role)\n\n### Query Parameters:\n\n- `product` (optional): Product ID to filter reviews\n    \n- `service` (optional): Service ID to filter reviews\n    \n- `user` (optional): User ID to filter reviews\n    \n- `status` (optional): 'active' or 'inactive' (default: 'active')\n    \n- `startDate` (optional): ISO date string for date range start\n    \n- `endDate` (optional): ISO date string for date range end\n    \n- `sortBy` (optional): 'rating' or 'createdAt' (default: 'createdAt')\n    \n- `sortOrder` (optional): 'asc' or 'desc' (default: 'desc')\n    \n- `page` (optional): Page number (default: 1)\n    \n- `limit` (optional): Items per page (default: 10)\n    \n\n### Example Request:\n\n```\nGET /reviews?product=65a123b456c789d012345678&sortBy=rating&sortOrder=desc&page=1&limit=10\n\n ```\n\n### Success Response (200 OK):\n\n``` json\n{\n    \"success\": true,\n    \"statusCode\": 200,\n    \"message\": \"Reviews retrieved successfully\",\n    \"data\": {\n        \"meta\": {\n            \"totalReviews\": 25,\n            \"averageRating\": 4.2,\n            \"ratingDistribution\": {\n                \"1\": 1,\n                \"2\": 2,\n                \"3\": 5,\n                \"4\": 10,\n                \"5\": 7\n            }\n        },\n        \"data\": [\n            {\n                \"_id\": \"65a123b456c789d012345678\",\n                \"rating\": 4.5,\n                \"review\": \"Great product!\",\n                \"user\": {\n                    \"name\": \"John Doe\",\n                    \"email\": \"john@example.com\"\n                },\n                \"product\": {\n                    \"name\": \"Product Name\",\n                    \"description\": \"Product Description\",\n                    \"price\": 99.99\n                },\n                \"status\": \"active\",\n                \"createdAt\": \"2024-02-08T10:00:00.000Z\"\n            }\n            // ... more reviews\n        ],\n        \"pagination\": {\n            \"page\": 1,\n            \"limit\": 10,\n            \"total\": 25,\n            \"totalPages\": 3\n        }\n    }\n}\n\n ```\n\n## 3\\. Update Review\n\nUpdate an existing review.\n\n**Endpoint:** `PATCH /reviews/:id`\n\n**Authorization:** Required (User role - only review owner)\n\n### Path Parameters:\n\n- `id`: Review ID\n    \n\n### Request Body (all fields optional):\n\n``` json\n{\n    \"rating\": 4.0,\n    \"review\": \"Updated review text\",\n    \"status\": \"active\"\n}\n\n ```\n\n### Success Response (200 OK):\n\n``` json\n{\n    \"success\": true,\n    \"statusCode\": 200,\n    \"message\": \"Review updated successfully\",\n    \"data\": {\n        \"_id\": \"65a123b456c789d012345678\",\n        \"rating\": 4.0,\n        \"review\": \"Updated review text\",\n        \"user\": \"65a123b456c789d012345678\",\n        \"product\": \"65a123b456c789d012345678\",\n        \"status\": \"active\",\n        \"updatedAt\": \"2024-02-08T11:00:00.000Z\"\n    }\n}\n\n ```\n\n### Error Response:\n\n``` json\n{\n    \"success\": false,\n    \"statusCode\": 404,\n    \"message\": \"Review not found or you are not authorized to update it\"\n}\n\n ```\n\n## 4\\. Delete Review\n\nSoft delete a review (changes status to 'inactive').\n\n**Endpoint:** `DELETE /reviews/:id`\n\n**Authorization:** Required (User role - review owner, or Admin role)\n\n### Path Parameters:\n\n- `id`: Review ID\n    \n\n### Success Response (200 OK):\n\n``` json\n{\n    \"success\": true,\n    \"statusCode\": 200,\n    \"message\": \"Review deleted successfully\",\n    \"data\": {\n        \"_id\": \"65a123b456c789d012345678\",\n        \"status\": \"inactive\",\n        \"updatedAt\": \"2024-02-08T12:00:00.000Z\"\n    }\n}\n\n ```\n\n### Error Response:\n\n``` json\n{\n    \"success\": false,\n    \"statusCode\": 404,\n    \"message\": \"Review not found or you are not authorized to delete it\"\n}\n\n ```\n\n## Testing Checklist\n\n### Create Review Testing:\n\n1. Create review for product (success)\n    \n2. Create review for service (success)\n    \n3. Try creating duplicate review (error)\n    \n4. Try creating review without rating (validation error)\n    \n5. Try creating review without review text (validation error)\n    \n6. Try creating review with rating > 5 (validation error)\n    \n7. Try creating review with rating < 1 (validation error)\n    \n8. Try creating review with both product and service (validation error)\n    \n\n### Get Reviews Testing:\n\n1. Get all reviews (default pagination)\n    \n2. Get reviews with custom pagination\n    \n3. Get reviews for specific product\n    \n4. Get reviews for specific service\n    \n5. Get reviews for specific user\n    \n6. Get reviews with date range\n    \n7. Get reviews sorted by rating\n    \n8. Get reviews sorted by date\n    \n9. Get reviews with invalid sort field (validation error)\n    \n10. Test with invalid pagination values\n    \n\n### Update Review Testing:\n\n1. Update own review (success)\n    \n2. Update review rating only\n    \n3. Update review text only\n    \n4. Update review status only\n    \n5. Try updating another user's review (error)\n    \n6. Try updating with invalid rating (validation error)\n    \n7. Try updating with empty review text (validation error)\n    \n\n### Delete Review Testing:\n\n1. Delete own review as user (success)\n    \n2. Delete review as admin (success)\n    \n3. Try deleting another user's review as regular user (error)\n    \n4. Try deleting non-existent review (error)\n    \n\n### Edge Cases:\n\n1. Test with invalid ObjectIds\n    \n2. Test with expired JWT token\n    \n3. Test with wrong user roles\n    \n4. Test with malformed request bodies\n    \n5. Test with special characters in review text\n    \n6. Test with floating point ratings\n    \n7. Test with maximum length reviews\n    \n\n## Environment Setup:\n\n### Variables:\n\n``` json\n{\n    \"BASE_URL\": \"http://localhost:5000/api/v1\",\n    \"USER_TOKEN\": \"your-jwt-token\",\n    \"ADMIN_TOKEN\": \"admin-jwt-token\",\n    \"HOST_TOKEN\": \"host-jwt-token\",\n    \"PRODUCT_ID\": \"valid-product-id\",\n    \"SERVICE_ID\": \"valid-service-id\",\n    \"USER_ID\": \"valid-user-id\",\n    \"REVIEW_ID\": \"valid-review-id\"\n}\n\n ```"
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "1. Add Item to Cart (Multiple Salons)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4MTY2MmRkMTI0MDE4NmUyZDhmMiIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJsb2NhbHVzZXIxQGdtYWlsLmNvbSIsIm5hbWUiOiJMb2NhbCBVc2VyIDEiLCJpYXQiOjE3MzkyNTQ0NDQsImV4cCI6MTczOTM0MDg0NH0.TWpAiSorrewRvamR-ZRzsWxYv66o8zUa_aKJVJjMi6s",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"productId\": \"67aaea6161dfa363addc35ba\",\r\n  \"quantity\": 7\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/cart/add-multi-salon-items",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"cart",
								"add-multi-salon-items"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Add Item to Cart (Single Salon)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4Y2Y2YWIxODIzMjk5MjI1Y2E1OCIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJsb2NhbHVzZXIyQGdtYWlsLmNvbSIsIm5hbWUiOiJMb2NhbCBVc2VyIDIiLCJpYXQiOjE3MzkyNjQ2ODQsImV4cCI6MTczOTM1MTA4NH0.gNuNDYmhNab6mFO3wp8_pVHWRXnEfS83WkccZuWAbXI",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"productId\": \"67a5d830c6546984482f855a\",\r\n  \"quantity\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/cart/add-single-salon-items",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"cart",
								"add-single-salon-items"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Get Cart",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4MTY2MmRkMTI0MDE4NmUyZDhmMiIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJsb2NhbHVzZXIxQGdtYWlsLmNvbSIsIm5hbWUiOiJMb2NhbCBVc2VyIDEiLCJpYXQiOjE3MzkyNTQ0NDQsImV4cCI6MTczOTM0MDg0NH0.TWpAiSorrewRvamR-ZRzsWxYv66o8zUa_aKJVJjMi6s",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/cart",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Update Cart Item Quantity",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4MTY2MmRkMTI0MDE4NmUyZDhmMiIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJsb2NhbHVzZXIxQGdtYWlsLmNvbSIsIm5hbWUiOiJMb2NhbCBVc2VyIDEiLCJpYXQiOjE3MzkyNTQ0NDQsImV4cCI6MTczOTM0MDg0NH0.TWpAiSorrewRvamR-ZRzsWxYv66o8zUa_aKJVJjMi6s",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"quantity\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/cart/item/67a5d830c6546984482f855a",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"cart",
								"item",
								"67a5d830c6546984482f855a"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Remove Cart Item",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM5ZGI2NjkwNDdkYjI0ZTAzYWNhMyIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJucmJuYXlvbmlpNTU1QGdtYWlsLmNvbSIsIm5hbWUiOiJOYXlvbjMzMyIsImlhdCI6MTczODcyNjAyMCwiZXhwIjoxNzM4ODEyNDIwfQ.LkILVlHPZhA8SCSp8OK8idr9TF0c4PNbT7QyPZdEYOk",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"quantity\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/cart/item/67a1d77468335a04b9138443",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"cart",
								"item",
								"67a1d77468335a04b9138443"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Clear All Cart",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM5ZGI2NjkwNDdkYjI0ZTAzYWNhMyIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJucmJuYXlvbmlpNTU1QGdtYWlsLmNvbSIsIm5hbWUiOiJOYXlvbjMzMyIsImlhdCI6MTczODcyNjAyMCwiZXhwIjoxNzM4ODEyNDIwfQ.LkILVlHPZhA8SCSp8OK8idr9TF0c4PNbT7QyPZdEYOk",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"quantity\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/cart/clear",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"cart",
								"clear"
							]
						}
					},
					"response": []
				}
			],
			"description": "# Cart API Documentation\n\n## Base URL\n\n`{{iphost}}`\n\n## Authentication\n\nAll endpoints require user authentication using JWT token in the Authorization header:\n\n```\nAuthorization: Bearer <token>\n\n ```\n\n## Endpoints\n\n### 1\\. Add Item to Cart (Multiple Salons)\n\nAdds a product to the cart, allowing products from multiple salons.\n\n**Endpoint:** `POST /cart/`add-multi-salon-items  \n  \n\n**Request Body:**\n\n``` json\n{\n  \"productId\": \"string\",\n  \"quantity\": number\n}\n\n ```\n\n**Test Cases:**\n\n1. {\"productId\": \"67aaea6161dfa363addc35ba\",\"quantity\": 1}\n    \n2. {\"productId\": \"67aaea6161dfa363addc35ba\",\"quantity\": 0}\n    \n3. {\"productId\": \"67aaea6161dfa363addc35b1\",\"quantity\": 1}\n    \n4. {\"productId\": \"67aaea6161dfa363addc35ba\",\"quantity\": 1000}\n    \n\n### 2\\. Add Item to Cart (Single Salon)\n\nAdds a product to the cart, restricting to items from a single salon.\n\n**Endpoint:** `POST /cart/add-single-salon-items`\n\n**Request Body:**\n\n``` json\n{\n  \"productId\": \"string\",\n  \"quantity\": number\n}\n\n ```\n\n**Test Cases:**\n\n1. {\"productId\": \"67aaea6161dfa363addc35ba\",\"quantity\": 1}\n    \n2. {\"productId\": \"67aaea6161dfa363addc35bb\",\"quantity\": 1}\n    \n3. {\"productId\": \"67aaea6161dfa363addc35bc\",\"quantity\": 1}\n    \n\n### 3\\. Get Cart\n\nRetrieves the current user's cart.\n\n**Endpoint:** `GET /cart`\n\n**Test Cases:**\n\n1. Get cart with items\n    \n2. Get empty cart\n    \n3. Get cart with invalid user token\n    \n\n### 4\\. Update Cart Item\n\nUpdates the quantity of an existing cart item.\n\n**Endpoint:** `PATCH /cart/item/:productId`\n\n**Request Body:**\n\n``` json\n{\n  \"quantity\": number\n}\n\n ```\n\n**Test Cases:**\n\n1. {\"quantity\": 2}\n    \n2. {\"quantity\": 0}\n    \n3. {\"quantity\": 1}\n    \n\n### 5\\. Remove Cart Item\n\nRemoves an item from the cart.\n\n**Endpoint:** `DELETE /cart/item/:productId`\n\n**Test Cases:**\n\n1. Remove existing item\n    \n2. Remove non-existent item\n    \n\n### 6\\. Clear Cart\n\nRemoves all items from the cart.\n\n**Endpoint:** `DELETE /cart/clear`\n\n**Test Cases:**\n\n1. Clear non-empty cart\n    \n2. Clear already empty cart"
		},
		{
			"name": "Wish List",
			"item": [
				{
					"name": "1. Add Product to Wishlist",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM5ZGI2NjkwNDdkYjI0ZTAzYWNhMyIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJucmJuYXlvbmlpNTU1QGdtYWlsLmNvbSIsIm5hbWUiOiJOYXlvbjMzMyIsImlhdCI6MTczODcyNjAyMCwiZXhwIjoxNzM4ODEyNDIwfQ.LkILVlHPZhA8SCSp8OK8idr9TF0c4PNbT7QyPZdEYOk",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/wishlist/add/67a1d77468335a04b9138443",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"wishlist",
								"add",
								"67a1d77468335a04b9138443"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Remove Product from Wishlist",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM5ZGI2NjkwNDdkYjI0ZTAzYWNhMyIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJucmJuYXlvbmlpNTU1QGdtYWlsLmNvbSIsIm5hbWUiOiJOYXlvbjMzMyIsImlhdCI6MTczODcyNjAyMCwiZXhwIjoxNzM4ODEyNDIwfQ.LkILVlHPZhA8SCSp8OK8idr9TF0c4PNbT7QyPZdEYOk",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"quantity\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/wishlist/remove/67a1d77468335a04b9138443",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"wishlist",
								"remove",
								"67a1d77468335a04b9138443"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Get Wishlist",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM5ZGI2NjkwNDdkYjI0ZTAzYWNhMyIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJucmJuYXlvbmlpNTU1QGdtYWlsLmNvbSIsIm5hbWUiOiJOYXlvbjMzMyIsImlhdCI6MTczODcyNjAyMCwiZXhwIjoxNzM4ODEyNDIwfQ.LkILVlHPZhA8SCSp8OK8idr9TF0c4PNbT7QyPZdEYOk",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/wishlist",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"wishlist"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Update Cart Item",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM5ZGI2NjkwNDdkYjI0ZTAzYWNhMyIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJucmJuYXlvbmlpNTU1QGdtYWlsLmNvbSIsIm5hbWUiOiJOYXlvbjMzMyIsImlhdCI6MTczODcyNjAyMCwiZXhwIjoxNzM4ODEyNDIwfQ.LkILVlHPZhA8SCSp8OK8idr9TF0c4PNbT7QyPZdEYOk",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"quantity\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/cart/item/67a1d77468335a04b9138443",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"cart",
								"item",
								"67a1d77468335a04b9138443"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Clear All Cart",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM5ZGI2NjkwNDdkYjI0ZTAzYWNhMyIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJucmJuYXlvbmlpNTU1QGdtYWlsLmNvbSIsIm5hbWUiOiJOYXlvbjMzMyIsImlhdCI6MTczODcyNjAyMCwiZXhwIjoxNzM4ODEyNDIwfQ.LkILVlHPZhA8SCSp8OK8idr9TF0c4PNbT7QyPZdEYOk",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"quantity\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/cart/clear",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"cart",
								"clear"
							]
						}
					},
					"response": []
				}
			],
			"description": "Below is the **API endpoint testing documentation** for the Wishlist module, including all possible test cases for each endpoint. This documentation is designed to help you set up and run tests in **Postman** to ensure the API works as expected. Additionally, I've reviewed the code and confirmed that it is logically correct and follows best practices.\n\n---\n\n## **API Endpoint Testing Documentation for Wishlist**\n\n### **1\\. Add Product to Wishlist**\n\n#### **Endpoint:**\n\n```\nPOST /wishlist/add/:id\n\n ```\n\n#### **Request Headers:**\n\n- `Authorization`: Bearer Token (JWT)\n    \n- `Content-Type`: application/json\n    \n\n#### **Request Parameters:**\n\n- `id`: Product ID (e.g., `60d5ec49f1b2c72d88f8e8c5`)\n    \n\n#### **Test Cases:**\n\n1. **Valid Request:**\n    \n    - POST {{base_url}}/wishlist/add/60d5ec49f1b2c72d88f8e8c5\n        \n    - { \"success\": true, \"statusCode\": 200, \"message\": \"Product added to wishlist successfully\", \"data\": { \"_id\": \"60d5ec49f1b2c72d88f8e8c5\", \"user\": \"60d5ec49f1b2c72d88f8e8c5\", \"product\": { \"_id\": \"60d5ec49f1b2c72d88f8e8c5\", \"name\": \"Product Name\", \"images\": \\[\"image_url\"\\], \"price\": 100, \"description\": \"Product Description\" }, \"salon\": { \"_id\": \"60d5ec49f1b2c72d88f8e8c5\", \"name\": \"Salon Name\", \"address\": \"Salon Address\", \"phone\": \"1234567890\" }, \"host\": { \"_id\": \"60d5ec49f1b2c72d88f8e8c5\", \"name\": \"Host Name\", \"email\": \"[host@example.com](https://mailto:host@example.com)\" }, \"createdAt\": \"2023-10-01T12:00:00.000Z\", \"updatedAt\": \"2023-10-01T12:00:00.000Z\" }}\n        \n2. **Product Already in Wishlist:**\n    \n    - POST {{base_url}}/wishlist/add/60d5ec49f1b2c72d88f8e8c5\n        \n    - { \"success\": false, \"statusCode\": 400, \"message\": \"Product already in wishlist\"}\n        \n3. **Product Not Found or Inactive:**\n    \n    - POST {{base_url}}/wishlist/add/invalid_product_id\n        \n    - { \"success\": false, \"statusCode\": 404, \"message\": \"Product not found or inactive\"}\n        \n\n---\n\n### **2\\. Remove Product from Wishlist**\n\n#### **Endpoint:**\n\n```\nDELETE /wishlist/remove/:id\n\n ```\n\n#### **Request Headers:**\n\n- `Authorization`: Bearer Token (JWT)\n    \n\n#### **Request Parameters:**\n\n- `id`: Product ID (e.g., `60d5ec49f1b2c72d88f8e8c5`)\n    \n\n#### **Test Cases:**\n\n1. **Valid Request:**\n    \n    - DELETE {{base_url}}/wishlist/remove/60d5ec49f1b2c72d88f8e8c5\n        \n    - { \"success\": true, \"statusCode\": 200, \"message\": \"Product removed from wishlist successfully\", \"data\": { \"_id\": \"60d5ec49f1b2c72d88f8e8c5\", \"user\": \"60d5ec49f1b2c72d88f8e8c5\", \"product\": { \"_id\": \"60d5ec49f1b2c72d88f8e8c5\", \"name\": \"Product Name\", \"images\": \\[\"image_url\"\\], \"price\": 100, \"description\": \"Product Description\" }, \"salon\": { \"_id\": \"60d5ec49f1b2c72d88f8e8c5\", \"name\": \"Salon Name\", \"address\": \"Salon Address\", \"phone\": \"1234567890\" }, \"host\": { \"_id\": \"60d5ec49f1b2c72d88f8e8c5\", \"name\": \"Host Name\", \"email\": \"[host@example.com](https://mailto:host@example.com)\" }, \"createdAt\": \"2023-10-01T12:00:00.000Z\", \"updatedAt\": \"2023-10-01T12:00:00.000Z\" }}\n        \n2. **Product Not Found in Wishlist:**\n    \n    - DELETE {{base_url}}/wishlist/remove/invalid_product_id\n        \n    - { \"success\": false, \"statusCode\": 404, \"message\": \"Item not found in wishlist\"}\n        \n\n---\n\n### **3\\. Get Wishlist**\n\n#### **Endpoint:**\n\n```\nGET /wishlist\n\n ```\n\n#### **Request Headers:**\n\n- `Authorization`: Bearer Token (JWT)\n    \n\n#### **Query Parameters:**\n\n- `searchTerm`: Search by product or salon name (e.g., `searchTerm=Product Name`)\n    \n- `salon`: Filter by salon ID (e.g., `salon=60d5ec49f1b2c72d88f8e8c5`)\n    \n- `host`: Filter by host ID (e.g., `host=60d5ec49f1b2c72d88f8e8c5`)\n    \n\n#### **Test Cases:**\n\n1. **Valid Request (No Filters):**\n    \n    - GET {{base_url}}/wishlist\n        \n    - { \"success\": true, \"statusCode\": 200, \"message\": \"Wishlist retrieved successfully\", \"data\": \\[ { \"_id\": \"60d5ec49f1b2c72d88f8e8c5\", \"user\": \"60d5ec49f1b2c72d88f8e8c5\", \"product\": { \"_id\": \"60d5ec49f1b2c72d88f8e8c5\", \"name\": \"Product Name\", \"images\": \\[\"image_url\"\\], \"price\": 100, \"description\": \"Product Description\", \"status\": \"active\" }, \"salon\": { \"_id\": \"60d5ec49f1b2c72d88f8e8c5\", \"name\": \"Salon Name\", \"address\": \"Salon Address\", \"phone\": \"1234567890\" }, \"host\": { \"_id\": \"60d5ec49f1b2c72d88f8e8c5\", \"name\": \"Host Name\", \"email\": \"[host@example.com](https://mailto:host@example.com)\" }, \"createdAt\": \"2023-10-01T12:00:00.000Z\", \"updatedAt\": \"2023-10-01T12:00:00.000Z\" } \\]}\n        \n2. **With Filters (Search by Product Name):**\n    \n    - GET {{base_url}}/wishlist?searchTerm=Product Name\n        \n    - { \"success\": true, \"statusCode\": 200, \"message\": \"Wishlist retrieved successfully\", \"data\": \\[ { \"_id\": \"60d5ec49f1b2c72d88f8e8c5\", \"user\": \"60d5ec49f1b2c72d88f8e8c5\", \"product\": { \"_id\": \"60d5ec49f1b2c72d88f8e8c5\", \"name\": \"Product Name\", \"images\": \\[\"image_url\"\\], \"price\": 100, \"description\": \"Product Description\", \"status\": \"active\" }, \"salon\": { \"_id\": \"60d5ec49f1b2c72d88f8e8c5\", \"name\": \"Salon Name\", \"address\": \"Salon Address\", \"phone\": \"1234567890\" }, \"host\": { \"_id\": \"60d5ec49f1b2c72d88f8e8c5\", \"name\": \"Host Name\", \"email\": \"[host@example.com](https://mailto:host@example.com)\" }, \"createdAt\": \"2023-10-01T12:00:00.000Z\", \"updatedAt\": \"2023-10-01T12:00:00.000Z\" } \\]}\n        \n3. **Empty Wishlist:**\n    \n    - GET {{base_url}}/wishlist\n        \n    - { \"success\": true, \"statusCode\": 200, \"message\": \"Wishlist retrieved successfully\", \"data\": \\[\\]}\n        \n\n---\n\n## **Postman Collection Setup**\n\n1. **Create a new collection** in Postman named `Wishlist API`.\n    \n2. **Add folders** for each endpoint: `Add to Wishlist`, `Remove from Wishlist`, and `Get Wishlist`.\n    \n3. **Add requests** for each test case within the respective folders.\n    \n4. **Set up environment variables** for `base_url` and `auth_token` to easily switch between different environments (e.g., local, staging, production).\n    \n\n### **Environment Variables:**\n\n- `base_url`: The base URL of your API (e.g., `http://localhost:5000/api/v1`).\n    \n- `auth_token`: The JWT token for authenticated requests.\n    \n\n---\n\n## **Code Review**\n\nThe code is logically correct and follows best practices:\n\n1. **Validation**: Proper checks are in place to ensure the product exists and is active before adding it to the wishlist.\n    \n2. **Duplicate Prevention**: The compound index (`wishlistSchema.index`) ensures no duplicate items are added.\n    \n3. **Filtering**: The `getWishlist` method supports filtering by `searchTerm`, `salon`, and `host`.\n    \n4. **Error Handling**: Proper error handling is implemented for invalid requests.\n    \n5. **Pagination**: If needed, pagination can be added to the `getWishlist` method for large datasets.\n    \n\n---\n\nThis documentation should help you thoroughly test the Wishlist API endpoints using Postman and ensure the functionality works as expected."
		},
		{
			"name": "Payment",
			"item": [
				{
					"name": "2. For card payments, confirm the payment:",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4MTY2MmRkMTI0MDE4NmUyZDhmMiIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJsb2NhbHVzZXIxQGdtYWlsLmNvbSIsIm5hbWUiOiJMb2NhbCBVc2VyIDEiLCJpYXQiOjE3Mzg5OTcyOTcsImV4cCI6MTczOTA4MzY5N30.9hrBJOUHNWLjtfk0kSuK86pwMO4HAtlBExuCvbAYig0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"paymentIntentId\": \"pi_3Qq9C0P4ZGqybo6D0Kzaw01k\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/payment/confirm",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"payment",
								"confirm"
							]
						}
					},
					"response": []
				},
				{
					"name": "1. Create Payment",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4MTY2MmRkMTI0MDE4NmUyZDhmMiIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJsb2NhbHVzZXIxQGdtYWlsLmNvbSIsIm5hbWUiOiJMb2NhbCBVc2VyIDEiLCJpYXQiOjE3Mzg5OTcyOTcsImV4cCI6MTczOTA4MzY5N30.9hrBJOUHNWLjtfk0kSuK86pwMO4HAtlBExuCvbAYig0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"cartId\": \"67a6fe9378bd4ada42f125ed\",\r\n  \"paymentMethod\": \"visa\",\r\n  \"cardId\": \"67a6fe6478bd4ada42f125e7\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/payment/create",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"payment",
								"create"
							]
						}
					},
					"response": []
				}
			],
			"description": "# Payment API Documentation\n\nBase URL: `http://10.0.70.205:4000/api/v1/payment`\n\n## Authentication\n\nAll endpoints require a Bearer token in the Authorization header:\n\n```\nAuthorization: Bearer <your_token>\n\n ```\n\n## Endpoints\n\n### 1\\. Create Payment\n\nCreates a new payment for a cart.\n\n**Endpoint:** `POST /create`\n\n**Request Body:**\n\n``` json\n{\n  \"cartId\": \"string\",\n  \"paymentMethod\": \"cash\" | \"visa\" | \"mastercard\" | \"paypal\",\n  \"cardId\": \"string\" // Required for card payments\n}\n\n ```\n\n**Response (Cash Payment):**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Payment initiated successfully\",\n  \"data\": {\n    \"_id\": \"string\",\n    \"amount\": number,\n    \"status\": \"pending\",\n    \"paymentMethod\": \"cash\",\n    \"user\": \"string\",\n    \"products\": [\n      {\n        \"productId\": \"string\",\n        \"quantity\": number,\n        \"price\": number,\n        \"salon\": \"string\",\n        \"host\": \"string\"\n      }\n    ]\n  }\n}\n\n ```\n\n**Response (Card Payment):**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Payment initiated successfully\",\n  \"data\": {\n    \"clientSecret\": \"string\",\n    \"transactionId\": \"string\",\n    \"amount\": number\n  }\n}\n\n ```\n\n### 2\\. Confirm Payment\n\nConfirms a card payment after successful processing.\n\n**Endpoint:** `POST /confirm`\n\n**Request Body:**\n\n``` json\n{\n  \"paymentIntentId\": \"string\"\n}\n\n ```\n\n**Response:**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Payment confirmed successfully\",\n  \"data\": {\n    \"_id\": \"string\",\n    \"status\": \"completed\",\n    \"amount\": number,\n    \"paymentMethod\": \"string\",\n    \"transactionId\": \"string\"\n  }\n}\n\n ```\n\n### 3\\. Get User Payments\n\nRetrieves all payments for the authenticated user.\n\n**Endpoint:** `GET /user`\n\n**Response:**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"User payments retrieved successfully\",\n  \"data\": [\n    {\n      \"_id\": \"string\",\n      \"amount\": number,\n      \"status\": \"string\",\n      \"paymentMethod\": \"string\",\n      \"products\": [\n        {\n          \"productId\": {\n            \"_id\": \"string\",\n            \"name\": \"string\",\n            \"price\": number\n          },\n          \"quantity\": number\n        }\n      ],\n      \"createdAt\": \"string\"\n    }\n  ]\n}\n\n ```\n\n### 4\\. Get Host Payments\n\nRetrieves all payments for the authenticated host.\n\n**Endpoint:** `GET /host`\n\n**Response:**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Host payments retrieved successfully\",\n  \"data\": [\n    {\n      \"_id\": \"string\",\n      \"amount\": number,\n      \"status\": \"string\",\n      \"paymentMethod\": \"string\",\n      \"user\": {\n        \"_id\": \"string\",\n        \"name\": \"string\",\n        \"email\": \"string\"\n      },\n      \"products\": [\n        {\n          \"productId\": {\n            \"_id\": \"string\",\n            \"name\": \"string\",\n            \"price\": number\n          },\n          \"quantity\": number\n        }\n      ],\n      \"createdAt\": \"string\"\n    }\n  ]\n}\n\n ```\n\n### 5\\. Get All Payments (Admin Only)\n\nRetrieves all payments with optional filters.\n\n**Endpoint:** `GET /`\n\n**Query Parameters:**\n\n- searchTerm (optional)\n    \n- status (optional)\n    \n- paymentMethod (optional)\n    \n- salon (optional)\n    \n- host (optional)\n    \n- startDate (optional)\n    \n- endDate (optional)\n    \n\n**Response:**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Payments retrieved successfully\",\n  \"data\": [\n    {\n      \"_id\": \"string\",\n      \"amount\": number,\n      \"status\": \"string\",\n      \"paymentMethod\": \"string\",\n      \"user\": {\n        \"_id\": \"string\",\n        \"name\": \"string\",\n        \"email\": \"string\"\n      },\n      \"products\": [\n        {\n          \"productId\": {\n            \"_id\": \"string\",\n            \"name\": \"string\",\n            \"price\": number\n          },\n          \"quantity\": number\n        }\n      ],\n      \"salon\": {\n        \"_id\": \"string\",\n        \"name\": \"string\"\n      },\n      \"host\": {\n        \"_id\": \"string\",\n        \"name\": \"string\"\n      },\n      \"createdAt\": \"string\"\n    }\n  ]\n}\n\n ```\n\n## Error Responses\n\nAll endpoints may return the following error response:\n\n``` json\n{\n  \"success\": false,\n  \"statusCode\": number,\n  \"message\": \"string\",\n  \"errorMessages\": [\n    {\n      \"path\": \"string\",\n      \"message\": \"string\"\n    }\n  ]\n}\n\n ```\n\nCommon status codes:\n\n- 400: Bad Request\n    \n- 401: Unauthorized\n    \n- 403: Forbidden\n    \n- 404: Not Found\n    \n- 500: Internal Server Error"
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Get User Notifications",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU5MDQ1ZTM2MjZhOTZhYzNmY2U2ZSIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJsb2NhbHVzZXIzQGdtYWlsLmNvbSIsIm5hbWUiOiJMb2NhbCBVc2VyIDMiLCJpYXQiOjE3Mzg5MDM2NzQsImV4cCI6MTczODk5MDA3NH0.By1EIDrbRlJR57ScAGMR70cyysnZDntLNsQD_oaRZCQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{iphost}}/notifications/user",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"notifications",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get HOST Notifications",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU5OGNhZGQyN2EzMTc5ZWJiYmU1MyIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJob3N0MkBnbWFpbC5jb20iLCJuYW1lIjoiU2Fsb24gMiIsImlhdCI6MTczODkwNTg1MCwiZXhwIjoxNzM4OTkyMjUwfQ.82VJ_ScfYDkOnzJVNMZHqe4Y9krH7nEB5ufEcAsfn70",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{iphost}}/notifications/host",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"notifications",
								"host"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ADMIN Notifications",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4MGQ0MmRkMTI0MDE4NmUyZDhlNCIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM4OTA2MDM3LCJleHAiOjE3Mzg5OTI0Mzd9.bY_c9SLI1wVur1YmbD6WsXTDkC4PxjtV518STLQpbZg",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{iphost}}/notifications/admin",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"notifications",
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all by Admin",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4MGQ0MmRkMTI0MDE4NmUyZDhlNCIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM4OTA2MDM3LCJleHAiOjE3Mzg5OTI0Mzd9.bY_c9SLI1wVur1YmbD6WsXTDkC4PxjtV518STLQpbZg",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{iphost}}/notifications/delete-all",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"notifications",
								"delete-all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mark Admin/user/host Notifications as Read",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4MGQ0MmRkMTI0MDE4NmUyZDhlNCIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM4OTA2MDM3LCJleHAiOjE3Mzg5OTI0Mzd9.bY_c9SLI1wVur1YmbD6WsXTDkC4PxjtV518STLQpbZg",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{iphost}}/notifications/admin/mark-as-read",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"notifications",
								"admin",
								"mark-as-read"
							]
						}
					},
					"response": []
				}
			],
			"description": "## **📌 Notification API Testing - Documentation**\n\n### **Base URL**\n\n```\nhttp://localhost:3000/api/v1/notifications\n\n ```\n\n(Replace with the production URL when deploying)\n\n---\n\n## **📝 API Endpoints**\n\n### **1️⃣ Get User Notifications**\n\n**📌 Endpoint:**\n\n``` http\nGET /user\n\n ```\n\n**🔑 Authentication:** Required (Bearer Token)  \n**📥 Request Headers:**\n\n``` json\n{\n  \"Authorization\": \"Bearer <your_token>\",\n  \"Content-Type\": \"application/json\"\n}\n\n ```\n\n**🔗 Query Parameters (Optional):**\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `page` | Number | Pagination page number |\n| `limit` | Number | Number of items per page |\n| `sortBy` | String | Field to sort by |\n| `sortOrder` | String | Sorting order (asc/desc) |\n\n**📤 Response:**\n\n``` json\n{\n  \"statusCode\": 200,\n  \"success\": true,\n  \"message\": \"User notifications retrieved successfully\",\n  \"data\": {\n    \"meta\": {\n      \"page\": 1,\n      \"limit\": 10,\n      \"total\": 5,\n      \"unreadCount\": 2\n    },\n    \"data\": [\n      {\n        \"_id\": \"65a123bc789456e7890123a4\",\n        \"message\": \"New booking received!\",\n        \"receiver\": \"65a123bc789456e7890123b5\",\n        \"read\": false,\n        \"type\": \"USER\",\n        \"createdAt\": \"2025-01-15T12:00:00.000Z\"\n      }\n    ]\n  }\n}\n\n ```\n\n---\n\n### **2️⃣ Get Host Notifications**\n\n**📌 Endpoint:**\n\n``` http\nGET /host\n\n ```\n\n(Same as \"User Notifications,\" but filtered for `HOST`)\n\n---\n\n### **3️⃣ Get Admin Notifications**\n\n**📌 Endpoint:**\n\n``` http\nGET /admin\n\n ```\n\n(Same as \"User Notifications,\" but filtered for `ADMIN`)\n\n---\n\n### **4️⃣ Mark Notifications as Read HOST or USER - host/**mark-as-read\n\n**📌 Endpoint:**\n\n``` http\nPATCH /user/mark-as-read\n\n ```\n\n**🔑 Authentication:** Required  \n**📥 Request Body:**\n\n``` json\n{}\n\n ```\n\n**📤 Response:**\n\n``` json\n{\n  \"statusCode\": 200,\n  \"success\": true,\n  \"message\": \"Notifications marked as read successfully\",\n  \"data\": {\n    \"modifiedCount\": 3\n  }\n}\n\n ```\n\n---\n\n### **5️⃣ Mark Admin Notifications as Read**\n\n**📌 Endpoint:**\n\n``` http\nPATCH /admin/mark-as-read\n\n ```\n\n(Same response as \"Mark Notifications as Read,\" but for `ADMIN`)\n\n---\n\n### **6️⃣ Delete All Notifications**\n\n**📌 Endpoint:**\n\n``` http\nDELETE /delete-all\n\n ```\n\n**📤 Response:**\n\n``` json\n{\n  \"statusCode\": 200,\n  \"success\": true,\n  \"message\": \"All notifications deleted successfully\",\n  \"data\": {\n    \"deletedCount\": 10\n  }\n}\n\n ```\n\n---\n\n## **🛠 Notification Socket Events**\n\n### **🔌 Connecting to the Notification WebSocket**\n\n**Client Code Example:**\n\n``` javascript\nimport { io } from \"socket.io-client\";\nconst socket = io(\"http://localhost:5000\");\n// Listen for new notifications\nsocket.on(\"notification\", (data) => {\n  console.log(\"New Notification:\", data);\n});\n\n ```\n\n### **📥 Socket Event:** **`notification`** **(Receive Notification in Real Time)**\n\n- **Event Name:** `notification`\n    \n- **Data Structure:**\n    \n\n``` json\n{\n  \"message\": \"New order received!\",\n  \"receiver\": \"65a123bc789456e7890123b5\",\n  \"read\": false,\n  \"type\": \"USER\",\n  \"createdAt\": \"2025-01-15T12:00:00.000Z\"\n}\n\n ```\n\n### **📤 Socket Event:** **`mark-as-read`** **(Mark All Notifications as Read)**\n\n- **Emit Event:**\n    \n\n``` javascript\nsocket.emit(\"mark-as-read\", { userId: \"65a123bc789456e7890123b5\" });\n\n ```\n\n- **Server Response:**\n    \n\n``` json\n{\n  \"status\": \"success\",\n  \"message\": \"All notifications marked as read\"\n}\n\n ```\n\n### **📤 Socket Event:** **`delete-all`** **(Delete All Notifications for a User)**\n\n- **Emit Event:**\n    \n\n``` javascript\nsocket.emit(\"delete-all\", { userId: \"65a123bc789456e7890123b5\" });\n\n ```\n\n- **Server Response:**\n    \n\n``` json\n{\n  \"status\": \"success\",\n  \"message\": \"All notifications deleted\"\n}\n\n ```\n\n---\n\n## **✅ Final Notes**\n\n- Ensure you pass a valid **Bearer Token** for authentication.\n    \n- Use **pagination parameters** to optimize large notification lists.\n    \n- Real-time notifications are received via **Socket.IO**.\n    \n- You can use **Postman** to test REST APIs and **Socket.IO Tester** for WebSocket events."
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "1.2 Checkout Cart (Multiple Salons)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4MTY2MmRkMTI0MDE4NmUyZDhmMiIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJsb2NhbHVzZXIxQGdtYWlsLmNvbSIsIm5hbWUiOiJMb2NhbCBVc2VyIDEiLCJpYXQiOjE3MzkyNTQ0NDQsImV4cCI6MTczOTM0MDg0NH0.TWpAiSorrewRvamR-ZRzsWxYv66o8zUa_aKJVJjMi6s",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"paymentMethod\": \"cash\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/orders/checkout-cart",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"orders",
								"checkout-cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.3 Create Order from Single Cart",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4Y2Y2YWIxODIzMjk5MjI1Y2E1OCIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJsb2NhbHVzZXIyQGdtYWlsLmNvbSIsIm5hbWUiOiJMb2NhbCBVc2VyIDIiLCJpYXQiOjE3MzkyNjQ2ODQsImV4cCI6MTczOTM1MTA4NH0.gNuNDYmhNab6mFO3wp8_pVHWRXnEfS83WkccZuWAbXI",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"paymentMethod\": \"cash\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/orders/checkout-single-salon-items-cart",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"orders",
								"checkout-single-salon-items-cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1 Get User Orders",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4Y2Y2YWIxODIzMjk5MjI1Y2E1OCIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJsb2NhbHVzZXIyQGdtYWlsLmNvbSIsIm5hbWUiOiJMb2NhbCBVc2VyIDIiLCJpYXQiOjE3MzkyNjQ2ODQsImV4cCI6MTczOTM1MTA4NH0.gNuNDYmhNab6mFO3wp8_pVHWRXnEfS83WkccZuWAbXI",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/orders/my-orders",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"orders",
								"my-orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2 Get Host Orders",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU5ODdiZGQyN2EzMTc5ZWJiYmU0NSIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJob3N0MUBnbWFpbC5jb20iLCJuYW1lIjoiU2Fsb24gMSIsImlhdCI6MTczOTI3NTM4MSwiZXhwIjoxNzM5MzYxNzgxfQ.budy9WdXoE76J3ntUP0p_m048UZ4HF5gv20-xomAr8A",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"paymentMethod\": \"cash\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/orders/host-orders?searchTerm=33079a98",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"orders",
								"host-orders"
							],
							"query": [
								{
									"key": "searchTerm",
									"value": "33079a98"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2.3 Get Order by ID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4Y2Y2YWIxODIzMjk5MjI1Y2E1OCIsInJvbGUiOiJVU0VSIiwiZW1haWwiOiJsb2NhbHVzZXIyQGdtYWlsLmNvbSIsIm5hbWUiOiJMb2NhbCBVc2VyIDIiLCJpYXQiOjE3MzkyNjQ2ODQsImV4cCI6MTczOTM1MTA4NH0.gNuNDYmhNab6mFO3wp8_pVHWRXnEfS83WkccZuWAbXI",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"paymentMethod\": \"cash\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/orders/551347bb",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"orders",
								"551347bb"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.1 Update Order Status if multi host1",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU5OGNhZGQyN2EzMTc5ZWJiYmU1MyIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJob3N0MkBnbWFpbC5jb20iLCJuYW1lIjoiU2Fsb24gMiIsImlhdCI6MTczOTI2ODA2OSwiZXhwIjoxNzM5MzU0NDY5fQ.XSfIrfF7_sy3XSE3ZXUJAinSeOfR-ciARbLiCkpXTVI",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"confirmed\" // \"pending\" | \"confirmed\" | \"completed\" | \"cancelled\" | \"refunded\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/orders/34111366/status",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"orders",
								"34111366",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.2 Update Order Confirm Status if multi host2",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU5ODdiZGQyN2EzMTc5ZWJiYmU0NSIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJob3N0MUBnbWFpbC5jb20iLCJuYW1lIjoiU2Fsb24gMSIsImlhdCI6MTczOTI2ODc2MSwiZXhwIjoxNzM5MzU1MTYxfQ.dftViPut23TlmsrWAXmYX3gXoF-utiVOQIzkiUBErHc",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"confirmed\" // \"pending\" | \"confirmed\" | \"completed\" | \"cancelled\" | \"refunded\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/orders/34111366/status",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"orders",
								"34111366",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.1 Confirm Cash Payment",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU5ODdiZGQyN2EzMTc5ZWJiYmU0NSIsInJvbGUiOiJIT1NUIiwiZW1haWwiOiJob3N0MUBnbWFpbC5jb20iLCJuYW1lIjoiU2Fsb24gMSIsImlhdCI6MTczOTI3NTM4MSwiZXhwIjoxNzM5MzYxNzgxfQ.budy9WdXoE76J3ntUP0p_m048UZ4HF5gv20-xomAr8A",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{iphost}}/orders/34111366/confirm-orders-and-cash-payment",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"orders",
								"34111366",
								"confirm-orders-and-cash-payment"
							]
						}
					},
					"response": []
				}
			],
			"description": "# Order API Testing Documentation\n\n## Base Configuration\n\n```\nBase URL: http://localhost:3000/api/v1/orders\nHeaders: \n  - Authorization: Bearer {token}\n  - Content-Type: application/json\n\n ```\n\n## 1\\. Order Creation & Checkout\n\n### 1.1 Create Direct Order\n\n**Endpoint:** `POST /create`  \n**Auth:** USER\n\n**Request Body:**\n\n``` json\n{\n  \"items\": [\n    {\n      \"product\": \"product_id\",\n      \"quantity\": 2,\n      \"price\": 100,\n      \"salon\": \"salon_id\",\n      \"host\": \"host_id\"\n    }\n  ],\n  \"paymentMethod\": \"cash\" // \"cash\" | \"visa\" | \"mastercard\" | \"paypal\"\n}\n\n ```\n\n**Success Response (201):**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 201,\n  \"message\": \"Order created successfully\",\n  \"data\": {\n    \"orderId\": \"#12345abc\",\n    \"user\": \"user_id\",\n    \"items\": [...],\n    \"totalAmount\": 200,\n    \"paymentMethod\": \"cash\",\n    \"status\": \"pending\",\n    \"paymentStatus\": \"pending\",\n    \"salonOrders\": [...]\n  }\n}\n\n ```\n\n### 1.2 Checkout Cart (Multiple Salons)\n\n**Endpoint:** `POST /checkout-cart`  \n**Auth:** USER\n\n**Request Body:**\n\n``` json\n{\n  \"paymentMethod\": \"cash\"\n}\n\n ```\n\n### 1.3 Create Order from Single Cart\n\n**Endpoint:** `POST /`checkout-single-salon-items-cart\n\n**Auth:** USER\n\n**Request Body:**\n\n``` json\n{\n  \"paymentMethod\": \"visa\"\n}\n\n ```\n\n## 2\\. Fetching Orders\n\n### 2.1 Get User Orders\n\n**Endpoint:** `GET /my-orders`  \n**Auth:** USER\n\n**Success Response (200):**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Orders retrieved successfully\",\n  \"data\": [\n    {\n      \"orderId\": \"#12345abc\",\n      \"items\": [...],\n      \"status\": \"pending\",\n      \"totalAmount\": 200\n    }\n  ]\n}\n\n ```\n\n### 2.2 Get Host Orders\n\n**Endpoint:** `GET /host-orders`  \n**Auth:** HOST\n\n**Success Response (200):**\n\n``` json\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Host orders retrieved successfully\",\n  \"data\": [...]\n}\n\n ```\n\n### 2.3 Get Order by ID\n\n**Endpoint:** `GET /:orderId`  \n**Auth:** USER, HOST, ADMIN\n\n**URL Parameters:**\n\n- orderId: string (required) ex. 551347bb\n    \n\n## 3\\. Order Status Updates\n\n### 3.1 Update Order Status\n\n**Endpoint:** `PATCH /:orderId/status`  \n**Auth:** HOST, ADMIN\n\n**URL Parameters:**\n\n- orderId: string (required)\n    \n\n**Request Body:**\n\n``` json\n{\n  \"status\": \"confirmed\", // \"pending\" | \"confirmed\" | \"completed\" | \"cancelled\" | \"refunded\"\n  \"salonId\": \"salon_id\" // optional\n}\n\n ```\n\n### **How Search Works**\n\n- Admins can now call:  \n    **`GET /orders/all-orders?searchTerm=order123`**  \n    _(Searches by Order ID, User Name, User Email, or Product Name)_\n    \n- Hosts can now call:  \n    **`GET /orders/host-orders?searchTerm=salonA`**  \n    _(Searches by Order ID, Product Name, or Salon Name)_\n    \n- Users can now call:  \n    **`GET /orders/my-orders?searchTerm=shampoo`**  \n    _(Searches by Order ID or Product Name in user's orders)_\n    \n\n---\n\n### 🔹 **Expected Query Examples**\n\n1. **Search by Order ID**\n    \n    - `/orders/all-orders?searchTerm=ORD12345`\n        \n    - `/orders/host-orders?searchTerm=ORD67890`\n        \n2. **Search by User Name or Email**\n    \n    - `/orders/all-orders?searchTerm=johndoe`\n        \n    - `/api/orders/all-orders?searchTerm=john@example.com`\n        \n3. **Search by Product Name**\n    \n    - `/api/orders/all-orders?searchTerm=shampoo`\n        \n    - `/orders/host-orders?searchTerm=conditioner`\n        \n4. **Search by Salon Name (For Hosts and Admins)**\n    \n    - `/orders/all-orders?searchTerm=BeautySalon`\n        \n    - `/orders/host-orders?searchTerm=LuxurySpa`\n        \n\n##   \n  \n4\\. Payment Confirmation\n\n### 4.1 Confirm Cash Payment\n\n**Endpoint:** `PATCH /:orderId/confirm-orders-and-cash-payment`  \n**Auth:** HOST, USER\n\n**Request Body:**\n\n``` json\n{\n  \"salonId\": \"salon_id\"\n}\n\n ```\n\n## 5\\. Delivery Completion\n\n### 5.1 Complete Delivery\n\n**Endpoint:** `PATCH /:orderId/complete-delivery`  \n**Auth:** HOST\n\n**URL Parameters:**\n\n- orderId: string (required)\n    \n\n## Testing Sequences\n\n### 1\\. Cash Payment Flow\n\n```\n1. Create order (POST /create) with cash payment\n2. Verify order creation (GET /:orderId)\n3. Host confirms payment (PATCH /confirm-orders-and-cash-payment)\n4. Update order status to confirmed (PATCH /:orderId/status)\n5. Complete delivery (PATCH /:orderId/complete-delivery)\n\n ```\n\n### 2\\. Card Payment Flow\n\n```\n1. Create order with card payment\n2. Verify immediate payment completion\n3. Update status to confirmed\n4. Complete delivery\n\n ```\n\n### 3\\. Cart Checkout Flow\n\n```\n1. Checkout cart (POST /checkout-cart)\n2. Verify order creation\n3. Follow payment flow based on method\n\n ```\n\n## Error Scenarios to Test\n\n### 1\\. Authentication & Authorization\n\n```\n- Missing token\n- Invalid token\n- Wrong role access\n- Expired token\n\n ```\n\n### 2\\. Input Validation\n\n```\n- Empty items array\n- Invalid product IDs\n- Invalid quantities\n- Invalid payment method\n- Missing required fields\n\n ```\n\n### 3\\. Business Logic\n\n```\n- Insufficient product quantity\n- Invalid order status transitions\n- Double payment confirmation\n- Invalid salon/host combinations\n\n ```\n\n### 4\\. Common Error Responses\n\n**Validation Error (400):**\n\n``` json\n{\n  \"success\": false,\n  \"statusCode\": 400,\n  \"message\": \"Validation Error\",\n  \"errorMessages\": [\n    {\n      \"path\": \"paymentMethod\",\n      \"message\": \"Invalid payment method\"\n    }\n  ]\n}\n\n ```\n\n**Authorization Error (403):**\n\n``` json\n{\n  \"success\": false,\n  \"statusCode\": 403,\n  \"message\": \"Unauthorized access\"\n}\n\n ```\n\n**Not Found Error (404):**\n\n``` json\n{\n  \"success\": false,\n  \"statusCode\": 404,\n  \"message\": \"Order not found\"\n}\n\n ```\n\n## Testing Environment Setup\n\n### Required Test Data\n\n1. User account with valid token\n    \n2. Host account with valid token\n    \n3. Admin account with valid token\n    \n4. Active products in database\n    \n5. Active salons\n    \n6. Active cart (for cart-related endpoints)\n    \n\n### Test Data Creation Script\n\n``` javascript\nconst testData = {\n  users: {\n    customer: {\n      _id: \"user_id\",\n      role: \"USER\",\n      token: \"user_token\"\n    },\n    host: {\n      _id: \"host_id\",\n      role: \"HOST\",\n      token: \"host_token\"\n    }\n  },\n  products: [\n    {\n      _id: \"product_id\",\n      name: \"Test Product\",\n      price: 100,\n      quantity: 50\n    }\n  ],\n  salons: [\n    {\n      _id: \"salon_id\",\n      name: \"Test Salon\",\n      host: \"host_id\"\n    }\n  ]\n};\n\n ```"
		},
		{
			"name": "Income Management API Documentation",
			"item": [
				{
					"name": "5. Get Admin Income Report",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTU4MGQ0MmRkMTI0MDE4NmUyZDhlNCIsInJvbGUiOiJBRE1JTiIsImVtYWlsIjoibnJibmF5b25AZ21haWwuY29tIiwibmFtZSI6Ik5heW9uIiwiaWF0IjoxNzM5MzQyNTQ1LCJleHAiOjE3Mzk0Mjg5NDV9.k2dg8FirMciGU4uK4XwuU7-Yq6zK7B39FDhg3PoNRco",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{iphost}}/incomes/admin/report?period=weekly",
							"host": [
								"{{iphost}}"
							],
							"path": [
								"incomes",
								"admin",
								"report"
							],
							"query": [
								{
									"key": "period",
									"value": "weekly"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "StartFragment\n\n# Income Management API Documentation\n\n## Base URL\n\n```\nhttp://localhost:3000/api/v1/incomes\n\n ```\n\n## Authentication\n\nAll endpoints require authentication. Add the following header:\n\n```\nAuthorization: Bearer <your_token>\n\n ```\n\n## 1\\. Create Income Record\n\n**Endpoint:** `POST /incomes/create`**Access:** Admin only\n\n**Request Body:**\n\n```\n{\n  \"salon\": \"salon_id\",\n  \"host\": \"host_id\",\n  \"order\": \"order_id\",\n  \"type\": \"service\",\n  \"amount\": 100,\n  \"paymentMethod\": \"cash\",\n  \"transactionDate\": \"2024-03-14T10:00:00Z\",\n  \"remarks\": \"Service payment\"\n}\n\n ```\n\n**Response:**\n\n```\n{\n  \"success\": true,\n  \"statusCode\": 201,\n  \"message\": \"Income record created successfully\",\n  \"data\": {\n    // Income record details\n  }\n}\n\n ```\n\n## 2\\. Get Host Incomes\n\n**Endpoint:** `GET /incomes/host`**Access:** Host only\n\n**Response:**\n\n```\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Host incomes retrieved successfully\",\n  \"data\": [\n    // Array of income records\n  ]\n}\n\n ```\n\n## 3\\. Get Salon Incomes\n\n**Endpoint:** `GET /incomes/salon/:salonId`**Access:** Host, Admin\n\n**Response:**\n\n```\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Salon incomes retrieved successfully\",\n  \"data\": [\n    // Array of income records\n  ]\n}\n\n ```\n\n## 4\\. Generate Income Report\n\n**Endpoint:** `GET /incomes/report`**Access:** Host only\n\n**Query Parameters:**\n\n- `period`: 'daily' | 'weekly' | 'monthly' | 'yearly'\n    \n- `startDate`: (optional) ISO date string\n    \n- `endDate`: (optional) ISO date string\n    \n\n**Example:** `/incomes/report?period=monthly&startDate=2024-03-01&endDate=2024-03-31`\n\n**Response:**\n\n```\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Income report generated successfully\",\n  \"data\": {\n    \"totalAmount\": 1000,\n    \"serviceIncome\": 700,\n    \"productIncome\": 300,\n    \"period\": \"monthly\",\n    \"startDate\": \"2024-03-01T00:00:00.000Z\",\n    \"endDate\": \"2024-03-31T23:59:59.999Z\",\n    \"transactions\": [\n      // Array of transactions\n    ]\n  }\n}\n\n ```\n\n## 5\\. Generate Detailed Income Report\n\n**Endpoint:** `GET /incomes/detailed-report`**Access:** Host only\n\n**Query Parameters:** Same as Generate Income Report\n\n**Response:**\n\n```\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Detailed income report generated successfully\",\n  \"data\": {\n    \"summary\": {\n      \"totalAmount\": 1000,\n      \"serviceIncome\": 700,\n      \"productIncome\": 300,\n      \"totalTransactions\": 10\n    },\n    \"byPaymentMethod\": [\n      {\n        \"_id\": \"cash\",\n        \"total\": 500,\n        \"count\": 5\n      }\n    ],\n    \"dailyBreakdown\": [\n      {\n        \"_id\": {\n          \"date\": \"2024-03-14\",\n          \"type\": \"service\"\n        },\n        \"total\": 200,\n        \"count\": 2\n      }\n    ],\n    \"recentTransactions\": [\n      // Array of recent transactions\n    ]\n  }\n}\n\n ```\n\n## 6\\. Update Income Status\n\n**Endpoint:** `PATCH /incomes/:incomeId/status`**Access:** Admin only\n\n**Request Body:**\n\n```\n{\n  \"status\": \"paid\"\n}\n\n ```\n\n**Response:**\n\n```\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Income status updated successfully\",\n  \"data\": {\n    // Updated income record\n  }\n}\n\n ```\n\n## 7\\. Get Admin Income Report\n\n**Endpoint:** `GET /incomes/admin/report`**Access:** Admin only\n\n**Query Parameters:**\n\n- `period`: 'daily' | 'weekly' | 'monthly' | 'yearly'\n    \n- `startDate`: (optional) ISO date string\n    \n- `endDate`: (optional) ISO date string\n    \n\n**Example:** `/income/admin/report?period=monthly`\n\n**Response:**\n\n```\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Admin income report generated successfully\",\n  \"data\": {\n    \"summary\": {\n      \"totalAmount\": 1000,\n      \"totalCount\": 10,\n      \"serviceAmount\": 700,\n      \"productAmount\": 300,\n      \"serviceCount\": 7,\n      \"productCount\": 3,\n      \"serviceRatio\": 70,\n      \"productRatio\": 30\n    },\n    \"timeBreakdown\": [\n      {\n        \"_id\": {\n          \"date\": \"2024-03-14\",\n          \"type\": \"service\"\n        },\n        \"amount\": 200,\n        \"count\": 2\n      }\n    ],\n    \"paymentMethods\": [\n      {\n        \"method\": \"cash\",\n        \"amount\": 500,\n        \"count\": 5\n      }\n    ],\n    \"period\": \"monthly\",\n    \"startDate\": \"2024-03-01T00:00:00.000Z\",\n    \"endDate\": \"2024-03-31T23:59:59.999Z\"\n  }\n}\n\n ```\n\n### Testing Tips:\n\n1. Create test data first using the create income endpoint\n    \n2. Test different time periods to ensure proper date filtering\n    \n3. Verify the ratios in admin reports sum up to 100%\n    \n4. Test with both valid and invalid date ranges\n    \n5. Ensure proper error handling by testing with invalid IDs and parameters\n    \n\nThe modified admin report now includes:\n\n- Detailed summary with counts and ratios\n    \n- Time-based breakdown of income\n    \n- Payment method analysis\n    \n- Proper date filtering for all periods\n    \n- Percentage calculations for service vs product income\n    \n\nAll endpoints require JWT token in the Authorization header:\n\n```\nAuthorization: Bearer <token>\n\n ```\n\n## Endpoints\n\n### 1\\. Create Income Record\n\n**Endpoint:** `POST /create`**Access:** Admin only\n\n**Request Body:**\n\n```\n{\n  \"salon\": \"64f5a7b1c82f6d1234567890\",\n  \"host\": \"64f5a7b1c82f6d1234567891\",\n  \"order\": \"64f5a7b1c82f6d1234567892\",\n  \"type\": \"service\",\n  \"amount\": 150.00,\n  \"paymentMethod\": \"visa\",\n  \"transactionDate\": \"2024-03-15T10:00:00Z\",\n  \"remarks\": \"Hair styling service\"\n}\n\n ```\n\n**Success Response (201):**\n\n```\n{\n  \"success\": true,\n  \"statusCode\": 201,\n  \"message\": \"Income record created successfully\",\n  \"data\": {\n    \"id\": \"65f5a7b1c82f6d1234567893\",\n    \"salon\": \"64f5a7b1c82f6d1234567890\",\n    \"host\": \"64f5a7b1c82f6d1234567891\",\n    \"order\": \"64f5a7b1c82f6d1234567892\",\n    \"type\": \"service\",\n    \"amount\": 150.00,\n    \"status\": \"pending\",\n    \"paymentMethod\": \"visa\",\n    \"transactionDate\": \"2024-03-15T10:00:00Z\",\n    \"remarks\": \"Hair styling service\",\n    \"createdAt\": \"2024-03-15T10:01:00Z\",\n    \"updatedAt\": \"2024-03-15T10:01:00Z\"\n  }\n}\n\n ```\n\n### 2\\. Get Host Incomes\n\n**Endpoint:** `GET /host`**Access:** Host only\n\n**Success Response (200):**\n\n```\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Host incomes retrieved successfully\",\n  \"data\": [\n    {\n      \"id\": \"65f5a7b1c82f6d1234567893\",\n      \"salon\": {\n        \"id\": \"64f5a7b1c82f6d1234567890\",\n        \"name\": \"Beauty Salon\"\n      },\n      \"order\": {\n        \"id\": \"64f5a7b1c82f6d1234567892\",\n        \"orderNumber\": \"ORD-001\"\n      },\n      \"type\": \"service\",\n      \"amount\": 150.00,\n      \"status\": \"paid\",\n      \"paymentMethod\": \"visa\",\n      \"transactionDate\": \"2024-03-15T10:00:00Z\"\n    }\n  ]\n}\n\n ```\n\n### 3\\. Generate Detailed Income Report\n\n**Endpoint:** `GET /detailed-report`**Access:** Host only\n\n**Query Parameters:**\n\n- period: 'daily' | 'weekly' | 'monthly' | 'yearly'\n    \n- startDate: (optional) ISO date string\n    \n- endDate: (optional) ISO date string\n    \n\n**Success Response (200):**\n\n```\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Detailed income report generated successfully\",\n  \"data\": {\n    \"summary\": {\n      \"totalAmount\": 2500.00,\n      \"serviceIncome\": 2000.00,\n      \"productIncome\": 500.00,\n      \"totalTransactions\": 15\n    },\n    \"byPaymentMethod\": [\n      {\n        \"_id\": \"visa\",\n        \"total\": 1500.00,\n        \"count\": 8\n      },\n      {\n        \"_id\": \"cash\",\n        \"total\": 1000.00,\n        \"count\": 7\n      }\n    ],\n    \"dailyBreakdown\": [\n      {\n        \"_id\": {\n          \"date\": \"2024-03-15\",\n          \"type\": \"service\"\n        },\n        \"total\": 800.00,\n        \"count\": 5\n      }\n    ],\n    \"recentTransactions\": [\n      {\n        \"id\": \"65f5a7b1c82f6d1234567893\",\n        \"type\": \"service\",\n        \"amount\": 150.00,\n        \"status\": \"paid\",\n        \"transactionDate\": \"2024-03-15T10:00:00Z\"\n      }\n    ],\n    \"period\": \"monthly\",\n    \"startDate\": \"2024-03-01T00:00:00Z\",\n    \"endDate\": \"2024-03-31T23:59:59Z\"\n  }\n}\n\n ```\n\n### 4\\. Update Income Status\n\n**Endpoint:** `PATCH /:incomeId/status`**Access:** Admin only\n\n**Request Body:**\n\n```\n{\n  \"status\": \"paid\",\n  \"bankAccountId\": \"64f5a7b1c82f6d1234567894\"\n}\n\n ```\n\n**Success Response (200):**\n\n```\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Income status updated successfully\",\n  \"data\": {\n    \"id\": \"65f5a7b1c82f6d1234567893\",\n    \"status\": \"paid\",\n    \"bankAccount\": \"64f5a7b1c82f6d1234567894\",\n    \"updatedAt\": \"2024-03-15T10:30:00Z\"\n  }\n}\n\n ```\n\n### 5\\. Get Admin Income Report\n\n**Endpoint:** `GET /admin/report`**Access:** Admin only\n\n**Query Parameters:**\n\n- period: 'daily' | 'weekly' | 'monthly' | 'yearly'\n    \n- startDate: (optional) ISO date string\n    \n- endDate: (optional) ISO date string\n    \n\n**Success Response (200):**\n\n```\n{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Admin income report generated successfully\",\n  \"data\": {\n    \"totalIncome\": 5000.00,\n    \"serviceIncome\": 4000.00,\n    \"productIncome\": 1000.00,\n    \"period\": \"monthly\",\n    \"startDate\": \"2024-03-01T00:00:00Z\",\n    \"endDate\": \"2024-03-31T23:59:59Z\",\n    \"details\": [\n      {\n        \"_id\": \"service\",\n        \"totalAmount\": 4000.00,\n        \"count\": 25\n      },\n      {\n        \"_id\": \"product\",\n        \"totalAmount\": 1000.00,\n        \"count\": 10\n      }\n    ]\n  }\n}\n\n ```\n\n## Error Responses\n\n### Validation Error (400)\n\n```\n{\n  \"success\": false,\n  \"statusCode\": 400,\n  \"message\": \"Validation Error\",\n  \"errorMessages\": [\n    {\n      \"path\": \"amount\",\n      \"message\": \"Amount is required\"\n    }\n  ]\n}\n\n ```\n\n### Unauthorized (401)\n\n```\n{\n  \"success\": false,\n  \"statusCode\": 401,\n  \"message\": \"You are not authorized to access this resource\"\n}\n\n ```\n\n### Not Found (404)\n\n```\n{\n  \"success\": false,\n  \"statusCode\": 404,\n  \"message\": \"Income record not found\"\n}\n\n ```\n\nThe code has been fixed and improved with:\n\n1. Added missing IDetailedIncomeReport interface\n    \n2. Added detailed income report route\n    \n3. Fixed route file location\n    \n4. Added proper error handling\n    \n5. Added comprehensive API documentation for testing\n    \n\nEndFragment"
		}
	]
}